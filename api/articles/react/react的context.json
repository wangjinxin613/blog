{"title":"react的context","uid":"f68b1b9ce9afbf4ff10bd16916415d01","slug":"react/react的context","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.993Z","comments":true,"path":"api/articles/react/react的context.json","keywords":null,"cover":null,"content":"<h1 id=\"React的context\"><a href=\"#React的context\" class=\"headerlink\" title=\"React的context\"></a>React的context</h1><p>Context 意为上下文，提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法。</p>\n<p>具体详见：<a href=\"https://reactjs.bootcss.com/docs/context.html\">context官方API</a></p>\n<ul>\n<li><code>React.createContext</code></li>\n<li><code>Context.Provider</code></li>\n<li><code>Class.contextType</code></li>\n<li><code>Context.Consumer</code></li>\n<li><code>Context.displayName</code></li>\n</ul>\n<h3 id=\"创建Context-React-createContext-defaultValue\"><a href=\"#创建Context-React-createContext-defaultValue\" class=\"headerlink\" title=\"创建Context  React.createContext(defaultValue)\"></a>创建Context  <code>React.createContext(defaultValue)</code></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &quot;react&quot;;</span><br><span class=\"line\">export const AppContext = React.createContext(&#123;</span><br><span class=\"line\">  age: 18</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意：<code>React.createContext(defaultValue)</code> 只有当Provider不存在时，defaultValue才会生效</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &quot;./styles.css&quot;;</span><br><span class=\"line\">import React, &#123; useState &#125; from &quot;react&quot;;</span><br><span class=\"line\">import Header from &quot;./components/header&quot;;</span><br><span class=\"line\">import Content from &quot;./components/content&quot;;</span><br><span class=\"line\">import TextContext from &quot;./components/testContext&quot;;</span><br><span class=\"line\">import &#123; AppContext &#125; from &quot;./common/context&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default function App() &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;&gt;</span><br><span class=\"line\">      &lt;AppContext.Provider</span><br><span class=\"line\">        value=&#123;&#123;</span><br><span class=\"line\">          username: &quot;小王&quot;,</span><br><span class=\"line\">          age: 1</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;Header&gt;&lt;/Header&gt;</span><br><span class=\"line\">          &lt;Content&gt;&lt;/Content&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">      &lt;/AppContext.Provider&gt;</span><br><span class=\"line\">      &lt;TextContext&gt;&lt;/TextContext&gt; &lt;!-- 这个组件的defaultValue才会生效 --&gt;</span><br><span class=\"line\">    &lt;/&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Context-Provider\"><a href=\"#Context-Provider\" class=\"headerlink\" title=\"Context.Provider\"></a><code>Context.Provider</code></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;AppContext.Provider value=&#123;/* 某个值 */&#125;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>每个 Context 对象都会返回一个 Provider React 组件，它允许消费组件订阅 context 的变化。</p>\n<p>Provider 接收一个 <code>value</code> 属性，传递给消费组件。一个 Provider 可以和多个消费组件有对应关系。多个 Provider 也可以嵌套使用，里层的会覆盖外层的数据。</p>\n<p>当 Provider 的 <code>value</code> 值发生变化时，它内部的所有消费组件都会重新渲染。Provider 及其内部 consumer 组件都不受制于 <code>shouldComponentUpdate</code> 函数，因此当 consumer 组件在其祖先组件退出更新的情况下也能更新。</p>\n<p>通过新旧值检测来确定变化，使用了与 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Description\"><code>Object.is</code></a> 相同的算法。</p>\n<h3 id=\"Class-contextType\"><a href=\"#Class-contextType\" class=\"headerlink\" title=\"Class.contextType\"></a><code>Class.contextType</code></h3><p>只有在类组件中指定了contextType的值是哪个Context，才可以在类中使用<code>this.context</code></p>\n<h3 id=\"Context-Consumer\"><a href=\"#Context-Consumer\" class=\"headerlink\" title=\"Context.Consumer\"></a><code>Context.Consumer</code></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;AppContext.Consumer&gt;</span><br><span class=\"line\">  &#123;(value) =&gt; &#123;</span><br><span class=\"line\">    return value.sex;</span><br><span class=\"line\">  &#125;&#125;</span><br><span class=\"line\">&lt;/AppContext.Consumer&gt;</span><br></pre></td></tr></table></figure>\n\n<p>订阅context的变更</p>\n<h3 id=\"Context-displayName\"><a href=\"#Context-displayName\" class=\"headerlink\" title=\"Context.displayName\"></a><code>Context.displayName</code></h3><p>context 对象接受一个名为 <code>displayName</code> 的 property，类型为字符串。React DevTools 使用该字符串来确定 context 要显示的内容。</p>\n<p>示例，下述组件在 DevTools 中将显示为 MyDisplayName：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const MyContext = React.createContext(/* some value */);</span><br><span class=\"line\">MyContext.displayName = &#x27;MyDisplayName&#x27;;</span><br><span class=\"line\">&lt;MyContext.Provider&gt; // &quot;MyDisplayName.Provider&quot; 在 DevTools 中</span><br><span class=\"line\">&lt;MyContext.Consumer&gt; // &quot;MyDisplayName.Consumer&quot; 在 DevTools 中</span><br></pre></td></tr></table></figure>\n\n<p>没啥用</p>\n","text":"React的contextContext 意为上下文，提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法。 具体详见：context...","permalink":"/post/react/react的context","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"react","slug":"react","count":2,"path":"api/tags/react.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#React%E7%9A%84context\"><span class=\"toc-text\">React的context</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAContext-React-createContext-defaultValue\"><span class=\"toc-text\">创建Context  React.createContext(defaultValue)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Context-Provider\"><span class=\"toc-text\">Context.Provider</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Class-contextType\"><span class=\"toc-text\">Class.contextType</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Context-Consumer\"><span class=\"toc-text\">Context.Consumer</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Context-displayName\"><span class=\"toc-text\">Context.displayName</span></a></li></ol></li></ol></li></ol>","author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"child_process子进程","uid":"c63dc365896e48a2d4572cf568e9ebd6","slug":"nodejs/child_process子进程","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.993Z","comments":true,"path":"api/articles/nodejs/child_process子进程.json","keywords":null,"cover":null,"text":"child_process 子进程在node中，child_process这个模块非常重要。掌握了它，等于在node的世界开启了一扇新的大门。熟悉shell脚本...","permalink":"/post/nodejs/child_process子进程","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"nodejs","slug":"nodejs","count":2,"path":"api/tags/nodejs.json"}],"author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"1. vscode插件开发准备","uid":"d4d2f14b32186159d88bc0a11749967b","slug":"vscode插件开发/1. vscode插件开发准备","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.993Z","comments":true,"path":"api/articles/vscode插件开发/1. vscode插件开发准备.json","keywords":null,"cover":[],"text":"VSCode插件开发所有笔记均参考于 https://www.cnblogs.com/liuxianan/p/vscode-plugin-overview.ht...","permalink":"/post/vscode插件开发/1. vscode插件开发准备","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"vscode插件开发","slug":"vscode插件开发","count":7,"path":"api/tags/vscode插件开发.json"}],"author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}