{"title":"4. WebView","uid":"c4ba207ec39c78e8fb0cded88eb2b98c","slug":"vscode插件开发/4. WebView","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.993Z","comments":true,"path":"api/articles/vscode插件开发/4. WebView.json","keywords":null,"cover":[],"content":"<h1 id=\"什么是Webview\"><a href=\"#什么是Webview\" class=\"headerlink\" title=\"什么是Webview\"></a>什么是Webview</h1><p>大家都知道，整个VSCode编辑器就是一张大的网页，其实，我们还可以在<code>Visual Studio Code</code>中创建完全自定义的、可以间接和<code>nodejs</code>通信的特殊网页（通过一个<code>acquireVsCodeApi</code>特殊方法），这个网页就叫<code>WebView</code>。内置的<code>Markdown</code>的预览就是使用<code>WebView</code>实现的。使用<code>Webview</code>可以构建复杂的、支持本地文件操作的用户界面。</p>\n<p>VSCode插件的WebView类似于iframe的实现，但并不是真正的iframe（我猜底层应该还是基于iframe实现的，只不过上层包装了一层），通过开发者工具可以看到：</p>\n<p><img src=\"http://image.haoji.me/201810/20181013_173826_714_7935.png\" alt=\"W1506xH802\"></p>\n<h2 id=\"1-1-demo\"><a href=\"#1-1-demo\" class=\"headerlink\" title=\"1.1. demo\"></a>1.1. demo</h2><p>在我们的<a href=\"https://github.com/sxei/vscode-plugin-demo\">vscode-plugin-demo</a>中，我写了一个非常简单、没啥实际意义的<code>Webview</code>示例仅供参考，在任意编辑器右键可以看到<code>打开Webview</code>的菜单：</p>\n<p><img src=\"http://image.haoji.me/201810/20181013_175235_562_4228.png\" alt=\"W1424xH842\"></p>\n<h1 id=\"什么时候适合使用WebView\"><a href=\"#什么时候适合使用WebView\" class=\"headerlink\" title=\"什么时候适合使用WebView\"></a>什么时候适合使用WebView</h1><p>虽然Webview令人很振奋，因为基于它我们可以随意发挥不受限制，但必须注意还是要慎用，毕竟VSCode是很注重性能的，不能因为你一个插件拖累了整个IDE，一般仅在原有API和功能以及交互方式无法满足你时才需要考虑，另外，设计糟糕的Webview也很容易在<code>VS Code</code>中让人感觉不舒适，不能让人家一看就觉得你这是一张网页，好看的UI也很重要。</p>\n<p>这是官网给出的建议，在使用webview之前请考虑以下事项：</p>\n<ul>\n<li>这个功能真的需要放在<code>VSCode</code>中吗？作为单独的应用程序或网站会不会更好呢？</li>\n<li>webview是实现这个功能的唯一方法吗？可以使用常规VS Code API吗？</li>\n<li>您的webview是否会带来足够的用户价值以证明其高资源成本？</li>\n</ul>\n<h1 id=\"正式开始WebView之旅\"><a href=\"#正式开始WebView之旅\" class=\"headerlink\" title=\"正式开始WebView之旅\"></a>正式开始WebView之旅</h1><h2 id=\"3-1-创建WebView\"><a href=\"#3-1-创建WebView\" class=\"headerlink\" title=\"3.1. 创建WebView\"></a>3.1. 创建WebView</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.<span class=\"property\">subscriptions</span>.<span class=\"title function_\">push</span>(vscode.<span class=\"property\">commands</span>.<span class=\"title function_\">registerCommand</span>(<span class=\"string\">&#x27;extension.demo.openWebview&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">uri</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 创建webview</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> panel = vscode.<span class=\"property\">window</span>.<span class=\"title function_\">createWebviewPanel</span>(</span><br><span class=\"line\">        <span class=\"string\">&#x27;testWebview&#x27;</span>, <span class=\"comment\">// viewType</span></span><br><span class=\"line\">        <span class=\"string\">&quot;WebView演示&quot;</span>, <span class=\"comment\">// 视图标题</span></span><br><span class=\"line\">        vscode.<span class=\"property\">ViewColumn</span>.<span class=\"property\">One</span>, <span class=\"comment\">// 显示在编辑器的哪个部位</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">enableScripts</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 启用JS，默认禁用</span></span><br><span class=\"line\">            <span class=\"attr\">retainContextWhenHidden</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// webview被隐藏时保持状态，避免被重置</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">    panel.<span class=\"property\">webview</span>.<span class=\"property\">html</span> = <span class=\"string\">`&lt;html&gt;&lt;body&gt;你好，我是Webview&lt;/body&gt;&lt;/html&gt;`</span></span><br></pre></td></tr></table></figure>\n\n<p>几点说明：</p>\n<ul>\n<li>默认情况下，在Web视图中禁用<code>JavaScript</code>，但可以通过传入<code>enableScripts: true</code>选项轻松启用；</li>\n<li>默认情况下当webview被隐藏时资源会被销毁，通过<code>retainContextWhenHidden: true</code>会一直保存，但会占用较大内存开销，仅在需要时开启；</li>\n</ul>\n<h2 id=\"3-2-加载本地资源\"><a href=\"#3-2-加载本地资源\" class=\"headerlink\" title=\"3.2. 加载本地资源\"></a>3.2. 加载本地资源</h2><p>出于安全考虑，Webview默认无法直接访问本地资源，它在一个孤立的上下文中运行，想要加载本地图片、js、css等必须通过特殊的<code>vscode-resource:</code>协议，网页里面<strong>所有的静态资源都要转换成这种格式，否则无法被正常加载</strong>。</p>\n<p><code>vscode-resource:</code>协议类似于<code>file:</code>协议，但它只允许访问特定的本地文件。和<code>file:</code>一样，<code>vscode-resource:</code>从磁盘加载绝对路径的资源。</p>\n<p>我简单封装了一个转换方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取某个扩展文件相对于webview需要的一种特殊路径格式</span></span><br><span class=\"line\"><span class=\"comment\"> * 形如：vscode-resource:/Users/toonces/projects/vscode-cat-coding/media/cat.gif</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> context 上下文</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> relativePath 扩展中某个文件相对于根目录的路径，如 images/test.jpg</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"attr\">getExtensionFileVscodeResource</span>: <span class=\"keyword\">function</span>(<span class=\"params\">context, relativePath</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> diskPath = vscode.<span class=\"property\">Uri</span>.<span class=\"title function_\">file</span>(path.<span class=\"title function_\">join</span>(context.<span class=\"property\">extensionPath</span>, relativePath));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> diskPath.<span class=\"title function_\">with</span>(&#123; <span class=\"attr\">scheme</span>: <span class=\"string\">&#x27;vscode-resource&#x27;</span> &#125;).<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，<code>vscode-resource:</code>只能访问以下位置中的资源：</p>\n<ul>\n<li>扩展程序安装目录中的文件。</li>\n<li>用户当前活动的工作区内。</li>\n<li>当然，你还可以使用<code>dataURI</code>直接在Webview中嵌入资源，这种方式没有限制；</li>\n</ul>\n<h2 id=\"3-3-从文件加载HTML内容\"><a href=\"#3-3-从文件加载HTML内容\" class=\"headerlink\" title=\"3.3. 从文件加载HTML内容\"></a>3.3. 从文件加载HTML内容</h2><p>默认不支持从文件加载HTML，需要自己封装代码，我简单封装了一个供大家参考：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 从某个HTML文件读取能被Webview加载的HTML内容</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; context 上下文</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; templatePath 相对于插件根目录的html文件相对路径</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getWebViewContent</span>(<span class=\"params\">context, templatePath</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> resourcePath = path.<span class=\"title function_\">join</span>(context.<span class=\"property\">extensionPath</span>, templatePath);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dirPath = path.<span class=\"title function_\">dirname</span>(resourcePath);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> html = fs.<span class=\"title function_\">readFileSync</span>(resourcePath, <span class=\"string\">&#x27;utf-8&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// vscode不支持直接加载本地资源，需要替换成其专有路径格式，这里只是简单的将样式和JS的路径替换</span></span><br><span class=\"line\">    html = html.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/(&lt;link.+?href=&quot;|&lt;script.+?src=&quot;|&lt;img.+?src=&quot;)(.+?)&quot;/g</span>, <span class=\"function\">(<span class=\"params\">m, $1, $2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $1 + vscode.<span class=\"property\">Uri</span>.<span class=\"title function_\">file</span>(path.<span class=\"title function_\">resolve</span>(dirPath, $2)).<span class=\"title function_\">with</span>(&#123; <span class=\"attr\">scheme</span>: <span class=\"string\">&#x27;vscode-resource&#x27;</span> &#125;).<span class=\"title function_\">toString</span>() + <span class=\"string\">&#x27;&quot;&#x27;</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行这段代码之后，会自动将HTML文件中<code>link</code>、<code>href</code>、<code>script</code>、<code>img</code>的资源相对路径全部替换成正确的<code>vscode-resource:</code>绝对路径，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">../../lib/vue-2.5.17/vue.js</span><br><span class=\"line\">变成</span><br><span class=\"line\">vscode-resource:/Users/test/workspace/vscode-plugin-demo/lib/vue-2.5.17/vue.js</span><br></pre></td></tr></table></figure>\n\n<p>使用方法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">panel.<span class=\"property\">webview</span>.<span class=\"property\">html</span> = <span class=\"title function_\">getWebViewContent</span>(context, <span class=\"string\">&#x27;src/view/test-webview.html&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-4-消息通信\"><a href=\"#3-4-消息通信\" class=\"headerlink\" title=\"3.4. 消息通信\"></a>3.4. 消息通信</h2><p>重头戏来了，<code>Webview</code>和普通网页非常类似，不能直接调用任何<code>VSCode</code>API，但是，它唯一特别之处就在于多了一个名叫<code>acquireVsCodeApi</code>的方法，执行这个方法会返回一个超级阉割版的<code>vscode</code>对象，这个对象里面有且仅有如下3个可以和插件通信的API：</p>\n<p><img src=\"http://image.haoji.me/201810/20181013_184810_640_4228.png\" alt=\"W624xH430\"></p>\n<p>插件和<code>Webview</code>之间如何互相通信呢？</p>\n<p>插件给<code>Webview</code>发送消息（支持发送任意可以被<code>JSON</code>化的数据）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">panel.<span class=\"property\">webview</span>.<span class=\"title function_\">postMessage</span>(&#123;<span class=\"attr\">text</span>: <span class=\"string\">&#x27;你好，我是小茗同学！&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>Webview</code>端接收：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;message&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> message = event.<span class=\"property\">data</span>;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Webview接收到的消息：&#x27;</span>, message);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Webview</code>主动发送消息给插件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vscode.<span class=\"title function_\">postMessage</span>(&#123;<span class=\"attr\">text</span>: <span class=\"string\">&#x27;你好，我是Webview啊！&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>插件接收：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">panel.<span class=\"property\">webview</span>.<span class=\"title function_\">onDidReceiveMessage</span>(<span class=\"function\"><span class=\"params\">message</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;插件收到的消息：&#x27;</span>, message);</span><br><span class=\"line\">&#125;, <span class=\"literal\">undefined</span>, context.<span class=\"property\">subscriptions</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-1-简单通信封装\"><a href=\"#3-4-1-简单通信封装\" class=\"headerlink\" title=\"3.4.1. 简单通信封装\"></a>3.4.1. 简单通信封装</h3><p>为了双方通信方便，我把它们简单封装了一下，仅供参考，Webview端：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> callbacks = &#123;&#125;; <span class=\"comment\">// 存放所有的回调函数</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 调用vscode原生api</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> data 可以是类似 &#123;cmd: &#x27;xxx&#x27;, param1: &#x27;xxx&#x27;&#125;，也可以直接是 cmd 字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> cb 可选的回调函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">callVscode</span>(<span class=\"params\">data, cb</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> data === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">        data = &#123; <span class=\"attr\">cmd</span>: data &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cb) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 时间戳加上5位随机数</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> cbid = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>() + <span class=\"string\">&#x27;&#x27;</span> + <span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">100000</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将回调函数分配一个随机cbid然后存起来，后续需要执行的时候再捞起来</span></span><br><span class=\"line\">        callbacks[cbid] = cb;</span><br><span class=\"line\">        data.<span class=\"property\">cbid</span> = cbid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vscode.<span class=\"title function_\">postMessage</span>(data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;message&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> message = event.<span class=\"property\">data</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (message.<span class=\"property\">cmd</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 来自vscode的回调</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;vscodeCallback&#x27;</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message.<span class=\"property\">data</span>);</span><br><span class=\"line\">            (callbacks[message.<span class=\"property\">cbid</span>] || <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; &#125;)(message.<span class=\"property\">data</span>);</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> callbacks[message.<span class=\"property\">cbid</span>]; <span class=\"comment\">// 执行完回调删除</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"attr\">default</span>: <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>插件端：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable language_\">global</span> = &#123; projectPath, panel&#125;;</span><br><span class=\"line\">panel.<span class=\"property\">webview</span>.<span class=\"title function_\">onDidReceiveMessage</span>(<span class=\"function\"><span class=\"params\">message</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (messageHandler[message.<span class=\"property\">cmd</span>]) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// cmd表示要执行的方法名称</span></span><br><span class=\"line\">        messageHandler[message.<span class=\"property\">cmd</span>](<span class=\"variable language_\">global</span>, message);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        util.<span class=\"title function_\">showError</span>(<span class=\"string\">`未找到名为 <span class=\"subst\">$&#123;message.cmd&#125;</span> 的方法!`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"literal\">undefined</span>, context.<span class=\"property\">subscriptions</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 存放所有消息回调函数，根据 message.cmd 来决定调用哪个方法，</span></span><br><span class=\"line\"><span class=\"comment\"> * 想调用什么方法，就在这里写一个和cmd同名的方法实现即可</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> messageHandler = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 弹出提示</span></span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"params\"><span class=\"variable language_\">global</span>, message</span>) &#123;</span><br><span class=\"line\">        util.<span class=\"title function_\">showInfo</span>(message.<span class=\"property\">info</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 显示错误提示</span></span><br><span class=\"line\">    <span class=\"title function_\">error</span>(<span class=\"params\"><span class=\"variable language_\">global</span>, message</span>) &#123;</span><br><span class=\"line\">        util.<span class=\"title function_\">showError</span>(message.<span class=\"property\">info</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 回调示例：获取工程名</span></span><br><span class=\"line\">    <span class=\"title function_\">getProjectName</span>(<span class=\"params\"><span class=\"variable language_\">global</span>, message</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">invokeCallback</span>(<span class=\"variable language_\">global</span>.<span class=\"property\">panel</span>, message, util.<span class=\"title function_\">getProjectName</span>(<span class=\"variable language_\">global</span>.<span class=\"property\">projectPath</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 执行回调函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; panel </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; message </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; resp </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">invokeCallback</span>(<span class=\"params\">panel, message, resp</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;回调消息：&#x27;</span>, resp);</span><br><span class=\"line\">    <span class=\"comment\">// 错误码在400-600之间的，默认弹出错误提示</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> resp == <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; resp.<span class=\"property\">code</span> &amp;&amp; resp.<span class=\"property\">code</span> &gt;= <span class=\"number\">400</span> &amp;&amp; resp.<span class=\"property\">code</span> &lt; <span class=\"number\">600</span>) &#123;</span><br><span class=\"line\">        util.<span class=\"title function_\">showError</span>(resp.<span class=\"property\">message</span> || <span class=\"string\">&#x27;发生未知错误！&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    panel.<span class=\"property\">webview</span>.<span class=\"title function_\">postMessage</span>(&#123;<span class=\"attr\">cmd</span>: <span class=\"string\">&#x27;vscodeCallback&#x27;</span>, <span class=\"attr\">cbid</span>: message.<span class=\"property\">cbid</span>, <span class=\"attr\">data</span>: resp&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>按上述方法封装之后，例如，Webview端想要执行名为<code>openFileInVscode</code>命令只需要这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">callVscode</span>(&#123;<span class=\"attr\">cmd</span>: <span class=\"string\">&#x27;openFileInVscode&#x27;</span>, <span class=\"attr\">path</span>: <span class=\"string\">`package.json`</span>&#125;, <span class=\"function\">(<span class=\"params\">message</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">alert</span>(message);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>然后在插件端的<code>messageHandler</code>实现<code>openFileInVscode</code>方法即可，其它都不用管：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> messageHandler = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 省略其它方法</span></span><br><span class=\"line\">    <span class=\"title function_\">openFileInVscode</span>(<span class=\"params\"><span class=\"variable language_\">global</span>, message</span>) &#123;</span><br><span class=\"line\">        util.<span class=\"title function_\">openFileInVscode</span>(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">global</span>.projectPath&#125;</span>/<span class=\"subst\">$&#123;message.path&#125;</span>`</span>);</span><br><span class=\"line\">\t\t<span class=\"title function_\">invokeCallback</span>(<span class=\"variable language_\">global</span>.<span class=\"property\">panel</span>, message, <span class=\"string\">&#x27;打开文件成功！&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>以上封装的比较随便，只是给大家提供一个思路，有时间可以好好封装一下。</p>\n<h2 id=\"3-5-主题适配\"><a href=\"#3-5-主题适配\" class=\"headerlink\" title=\"3.5. 主题适配\"></a>3.5. 主题适配</h2><p><code>Webview</code>可以根据<code>VS Code</code>的当前主题更改其外观，原理是body上面添加当前主题名称，主要有以下三种：</p>\n<ul>\n<li><code>vscode-light</code> - 浅色主题；</li>\n<li><code>vscode-dark</code> -深色主题；</li>\n<li><code>vscode-high-contrast</code> - 高对比度主题;</li>\n</ul>\n<p>所以我们可以通过自己写样式来适配不同主题：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 浅色主题 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.body</span><span class=\"selector-class\">.vscode-light</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: white;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 深色主题 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span><span class=\"selector-class\">.vscode-dark</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#252526</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 高对比度主题 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span><span class=\"selector-class\">.vscode-high-contrast</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: white;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>深色主题效果：</p>\n<p><img src=\"http://image.haoji.me/201810/20181015_093741_153_8305.png\" alt=\"W1404xH770\"></p>\n<h2 id=\"3-6-生命周期\"><a href=\"#3-6-生命周期\" class=\"headerlink\" title=\"3.6. 生命周期\"></a>3.6. 生命周期</h2><p><code>webview</code>由创建它的扩展程序所有，返回的<code>panel</code>对象你必须自己保存，如果你的扩展程序丢失了这个引用，那么将无法再次重新访问该<code>webview</code>，即使Web视图继续显示在<code>vscode</code>中。</p>\n<p>用户也可以随时关闭<code>webview</code>面板。当用户关闭webview面板时，webview本身将被销毁，此时不能再使用panel引用，否则将会出现异常，可以通过监听<code>onDidDispose</code>事件在这里面做一些销毁操作。</p>\n<p>可以通过<code>panel.dispose()</code>方法主动关闭webview。</p>\n<h2 id=\"3-7-状态保持\"><a href=\"#3-7-状态保持\" class=\"headerlink\" title=\"3.7. 状态保持\"></a>3.7. 状态保持</h2><p>当webview移动到后台又再次显示时，webview中的任何状态都将丢失。</p>\n<p>解决此问题的最佳方法是使你的webview无状态，通过消息传递来保存webview的状态。</p>\n<h3 id=\"3-7-1-state\"><a href=\"#3-7-1-state\" class=\"headerlink\" title=\"3.7.1. state\"></a>3.7.1. state</h3><p>在webview的js中我们可以使用<code>vscode.getState()</code>和<code>vscode.setState()</code>方法来保存和恢复JSON可序列化状态对象。当webview被隐藏时，即使webview内容本身被破坏，这些状态仍然会保存。当然了，当webview被销毁时，状态将被销毁。</p>\n<h3 id=\"3-7-2-序列化\"><a href=\"#3-7-2-序列化\" class=\"headerlink\" title=\"3.7.2. 序列化\"></a>3.7.2. 序列化</h3><p>通过注册<code>WebviewPanelSerializer</code>可以实现在<code>VScode</code>重启后自动恢复你的<code>webview</code>，当然，序列化其实也是建立在<code>getState</code>和<code>setState</code>之上的。</p>\n<p>注册方法：<code>vscode.window.registerWebviewPanelSerializer</code></p>\n<h3 id=\"3-7-3-retainContextWhenHidden\"><a href=\"#3-7-3-retainContextWhenHidden\" class=\"headerlink\" title=\"3.7.3. retainContextWhenHidden\"></a>3.7.3. retainContextWhenHidden</h3><p>对于具有非常复杂的UI或状态且无法快速保存和恢复的<code>webview</code>，我们可以直接使用<code>retainContextWhenHidden</code>选项。设置<code>retainContextWhenHidden: true</code>后即使webview被隐藏到后台其状态也不会丢失。</p>\n<p>尽管<code>retainContextWhenHidden</code>很有吸引力，但它需要很高的内存开销，一般建议在实在没办法的时候才启用。<br><code>getState</code>和<code>setState</code>是持久化的首选方式，因为它们的性能开销要比<code>retainContextWhenHidden</code>低得多。</p>\n<h1 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h1><p>注意，要调试Webview不能直接把VSCode的开发者工具打开，直接打开就会和我们最前面的截图看到的那样，你只能看到一个<code>&lt;webview&gt;&lt;/webview&gt;</code>标签，看不到代码，要看代码需要按下<code>Ctrl+Shift+P</code>然后执行<code>打开Webview开发工具</code>，英文版应该是<code>Open Webview Developer Tools</code>：</p>\n<p><img src=\"http://image.haoji.me/201810/20181013_192430_475_8260.png\" alt=\"W906xH526\"></p>\n<p>审查Webview：</p>\n<p><img src=\"http://image.haoji.me/201810/20181013_192845_230_7878.png\" alt=\"W1152xH1086\"></p>\n<p>这个时候需要特别注意错误日志出现的位置，如果是Webview的错误，一般打印在前面说的这个开发者工具，但如果是插件端的错误只会打印在整个VSCode的开发者工具里。</p>\n","text":"什么是Webview大家都知道，整个VSCode编辑器就是一张大的网页，其实，我们还可以在Visual Studio Code中创建完全自定义的、可以间接和no...","permalink":"/post/vscode插件开发/4. WebView","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[],"tags":[{"name":"vscode插件开发","slug":"vscode插件开发","count":7,"path":"api/tags/vscode插件开发.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFWebview\"><span class=\"toc-text\">什么是Webview</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-demo\"><span class=\"toc-text\">1.1. demo</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E9%80%82%E5%90%88%E4%BD%BF%E7%94%A8WebView\"><span class=\"toc-text\">什么时候适合使用WebView</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%BC%8F%E5%BC%80%E5%A7%8BWebView%E4%B9%8B%E6%97%85\"><span class=\"toc-text\">正式开始WebView之旅</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E5%88%9B%E5%BB%BAWebView\"><span class=\"toc-text\">3.1. 创建WebView</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0%E8%B5%84%E6%BA%90\"><span class=\"toc-text\">3.2. 加载本地资源</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-%E4%BB%8E%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BDHTML%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">3.3. 从文件加载HTML内容</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4-%E6%B6%88%E6%81%AF%E9%80%9A%E4%BF%A1\"><span class=\"toc-text\">3.4. 消息通信</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-1-%E7%AE%80%E5%8D%95%E9%80%9A%E4%BF%A1%E5%B0%81%E8%A3%85\"><span class=\"toc-text\">3.4.1. 简单通信封装</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-5-%E4%B8%BB%E9%A2%98%E9%80%82%E9%85%8D\"><span class=\"toc-text\">3.5. 主题适配</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-6-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">3.6. 生命周期</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-7-%E7%8A%B6%E6%80%81%E4%BF%9D%E6%8C%81\"><span class=\"toc-text\">3.7. 状态保持</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-7-1-state\"><span class=\"toc-text\">3.7.1. state</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-7-2-%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">3.7.2. 序列化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-7-3-retainContextWhenHidden\"><span class=\"toc-text\">3.7.3. retainContextWhenHidden</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%B0%83%E8%AF%95\"><span class=\"toc-text\">调试</span></a></li></ol>","author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"3. 命令、菜单、快捷键","uid":"f92875d3c6e56f019d49915a4496952b","slug":"vscode插件开发/3. 命令、菜单、快捷键","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.993Z","comments":true,"path":"api/articles/vscode插件开发/3. 命令、菜单、快捷键.json","keywords":null,"cover":[],"text":"命令我们在前面HelloWord章节中已经提到了命令写法，这里再重温一下。 123context.subscriptions.push(vscode.comma...","permalink":"/post/vscode插件开发/3. 命令、菜单、快捷键","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"vscode插件开发","slug":"vscode插件开发","count":7,"path":"api/tags/vscode插件开发.json"}],"author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"1. vscode插件开发准备","uid":"d4d2f14b32186159d88bc0a11749967b","slug":"vscode插件开发/1. vscode插件开发准备","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.993Z","comments":true,"path":"api/articles/vscode插件开发/1. vscode插件开发准备.json","keywords":null,"cover":[],"text":"VSCode插件开发所有笔记均参考于 https://www.cnblogs.com/liuxianan/p/vscode-plugin-overview.ht...","permalink":"/post/vscode插件开发/1. vscode插件开发准备","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"vscode插件开发","slug":"vscode插件开发","count":7,"path":"api/tags/vscode插件开发.json"}],"author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}