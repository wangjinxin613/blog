{"title":"Jest入门笔记","uid":"cb05db90efeecb5af5d994efc32f8989","slug":"其他/Jest/Jest入门笔记","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.999Z","comments":true,"path":"api/articles/其他/Jest/Jest入门笔记.json","keywords":null,"cover":[],"content":"<h5 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1. 介绍\"></a>1. 介绍</h5><p>Jest是 Facebook 的一套开源的 JavaScript 测试框架， 它自动集成了断言、JSDom、覆盖率报告等开发者所需要的所有测试工具，是一款几乎零配置的测试框架。</p>\n<h5 id=\"2-安装\"><a href=\"#2-安装\" class=\"headerlink\" title=\"2. 安装\"></a>2. 安装</h5><ul>\n<li>通过 npm 添加依赖：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev jest babel-jest babel-core babel-preset-env regenerator-runtime</span><br></pre></td></tr></table></figure>\n\n<p>babel-jest、 babel-core、 regenerator-runtime、babel-preset-env这几个依赖是为了让我们可以使用ES6的语法特性进行单元测试，ES6提供的 import 来导入模块的方式，Jest本身W是不支持的。</p>\n<ul>\n<li>添加.babelrc文件</li>\n</ul>\n<p> 在项目的根目录下添加.babelrc文件，并在文件复制如下内容:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;presets&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;env&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改package.json中的test脚本</li>\n</ul>\n<p>打开package.json文件，将script下的test的值修改为jest：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;jest&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果在typescript中使用需要安装ts-jest</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install ts-jest --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>在项目根目录新建 <code>jest.config.js</code> 文件，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">roots</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;&lt;rootDir&gt;/test&quot;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">testRegex</span>: <span class=\"string\">&#x27;test/(.+)\\\\.test\\\\.(jsx?|tsx?)$&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">transform</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;^.+\\\\.tsx?$&quot;</span>: <span class=\"string\">&quot;ts-jest&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">moduleFileExtensions</span>: [<span class=\"string\">&#x27;ts&#x27;</span>, <span class=\"string\">&#x27;tsx&#x27;</span>, <span class=\"string\">&#x27;js&#x27;</span>, <span class=\"string\">&#x27;jsx&#x27;</span>, <span class=\"string\">&#x27;json&#x27;</span>, <span class=\"string\">&#x27;node&#x27;</span>],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-使用\"><a href=\"#3-使用\" class=\"headerlink\" title=\"3. 使用\"></a>3. 使用</h5><ul>\n<li>sum.js</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span> (a, b) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span> (a, b) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fetchUser</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://jsonplaceholder.typicode.com/users/1&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.<span class=\"property\">data</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">\tsum,</span><br><span class=\"line\">  fetchUser</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>sun.test.js</li>\n</ul>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;sum , fetchUser&#125;  <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./sum&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// const fetchUser = require(&#x27;./sum&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 相等判断：toBe 使用 Object.is 来判断相等，</span></span><br><span class=\"line\"><span class=\"comment\">// toEqual 会递归判断 Object 的每一个字段，</span></span><br><span class=\"line\"><span class=\"comment\">// 对数值来说 toBe 和 toEqual 相同；</span></span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&quot;两个数字相加&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">expect</span>(<span class=\"title function_\">sum</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>)).<span class=\"property\">not</span>.<span class=\"title function_\">toBe</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;object assignment&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = &#123;<span class=\"attr\">one</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">  data[<span class=\"string\">&#x27;two&#x27;</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"title function_\">expect</span>(data).<span class=\"title function_\">toEqual</span>(&#123;<span class=\"attr\">one</span>: <span class=\"number\">1</span>, <span class=\"attr\">two</span>: <span class=\"number\">2</span>&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 判断符点数：可使用 toBeCloseTo 来解决 JS 浮点精度带来的问题，如下示例；</span></span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;adding floating point numbers&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = <span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>; <span class=\"comment\">// 0.30000000000000004</span></span><br><span class=\"line\">  <span class=\"title function_\">expect</span>(value).<span class=\"title function_\">toBeCloseTo</span>(<span class=\"number\">0.3</span>); <span class=\"comment\">// 测试通过</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;fetchUser() 可以请求到一个含有name属性值为Leanne Graham的对象&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  expect.<span class=\"title function_\">assertions</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">fetchUser</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">expect</span>(data.<span class=\"property\">name</span>).<span class=\"title function_\">toBe</span>(<span class=\"string\">&#x27;Leanne Graham&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//上面调用了expect.assertions(1)，它能确保在异步的测试用例中，</span></span><br><span class=\"line\"><span class=\"comment\">//有一个断言会在回调函数中被执行。这在进行异步代码的测试中十分有效。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;mock&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> mockCallback = jest.<span class=\"title function_\">fn</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"number\">42</span> + x);</span><br><span class=\"line\">  [<span class=\"number\">0</span>, <span class=\"number\">1</span>].<span class=\"title function_\">forEach</span>(mockCallback);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(mockCallback.<span class=\"property\">mock</span>.<span class=\"property\">calls</span>,<span class=\"string\">&#x27;mockCallback.mock.calls&#x27;</span>)</span><br><span class=\"line\">  <span class=\"comment\">// Mock函数被调用两次</span></span><br><span class=\"line\">  <span class=\"title function_\">expect</span>(mockCallback.<span class=\"property\">mock</span>.<span class=\"property\">calls</span>.<span class=\"property\">length</span>).<span class=\"title function_\">toBe</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 第一次调用Mock函数时，第一个参数为0</span></span><br><span class=\"line\">  <span class=\"title function_\">expect</span>(mockCallback.<span class=\"property\">mock</span>.<span class=\"property\">calls</span>[<span class=\"number\">0</span>][<span class=\"number\">0</span>]).<span class=\"title function_\">toBe</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 第二次调用Mock函数时，第一个参数为1</span></span><br><span class=\"line\">  <span class=\"title function_\">expect</span>(mockCallback.<span class=\"property\">mock</span>.<span class=\"property\">calls</span>[<span class=\"number\">1</span>][<span class=\"number\">0</span>]).<span class=\"title function_\">toBe</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 第一次调用Mock函数的返回值为42</span></span><br><span class=\"line\">  <span class=\"title function_\">expect</span>(mockCallback.<span class=\"property\">mock</span>.<span class=\"property\">results</span>[<span class=\"number\">0</span>].<span class=\"property\">value</span>).<span class=\"title function_\">toBe</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// const myMock = jest.fn();</span></span><br><span class=\"line\">  <span class=\"comment\">// const a = new myMock();</span></span><br><span class=\"line\">  <span class=\"comment\">// const b = &#123;&#125;;</span></span><br><span class=\"line\">  <span class=\"comment\">// const bound = myMock.bind(b);</span></span><br><span class=\"line\">  <span class=\"comment\">// bound();</span></span><br><span class=\"line\">  <span class=\"comment\">// console.log(myMock.mock.instances);</span></span><br><span class=\"line\">  <span class=\"comment\">// // &gt; [ &lt;a&gt;, &lt;b&gt; ]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Mock 函数还可以通过工具函数模拟返回值。</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> myMock = jest.<span class=\"title function_\">fn</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">myMock</span>());</span><br><span class=\"line\">  <span class=\"comment\">// &gt; undefined</span></span><br><span class=\"line\">  myMock</span><br><span class=\"line\">  .<span class=\"title function_\">mockReturnValueOnce</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">mockReturnValueOnce</span>(<span class=\"string\">&#x27;x&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">mockReturnValue</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">myMock</span>(), <span class=\"title function_\">myMock</span>(), <span class=\"title function_\">myMock</span>(), <span class=\"title function_\">myMock</span>());</span><br><span class=\"line\">  <span class=\"comment\">// &gt; 10, &#x27;x&#x27;, true, true</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-常用断点\"><a href=\"#4-常用断点\" class=\"headerlink\" title=\"4. 常用断点\"></a>4. 常用断点</h5><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">expect</span>(&#123;a:<span class=\"number\">1</span>&#125;).toBe(&#123;a:<span class=\"number\">1</span>&#125;)<span class=\"comment\">//判断两个对象是否相等</span></span><br><span class=\"line\"><span class=\"keyword\">expect</span>(&#123;a:<span class=\"number\">1</span>&#125;).toEqual(&#123;a:<span class=\"number\">1</span>&#125;)<span class=\"comment\">//归检查对象或数组的每个字段是否相等</span></span><br><span class=\"line\"><span class=\"keyword\">expect</span>(<span class=\"number\">1</span>).not.toBe(<span class=\"number\">2</span>)<span class=\"comment\">//判断不等</span></span><br><span class=\"line\"><span class=\"keyword\">expect</span>(n).toBeNull(); <span class=\"comment\">//判断是否为null</span></span><br><span class=\"line\"><span class=\"keyword\">expect</span>(n).toBeUndefined(); <span class=\"comment\">//判断是否为undefined</span></span><br><span class=\"line\"><span class=\"keyword\">expect</span>(n).toBeDefined(); <span class=\"comment\">//判断结果与toBeUndefined相反</span></span><br><span class=\"line\"><span class=\"keyword\">expect</span>(n).toBeTruthy(); <span class=\"comment\">//判断结果为true</span></span><br><span class=\"line\"><span class=\"keyword\">expect</span>(n).toBeFalsy(); <span class=\"comment\">//判断结果为false</span></span><br><span class=\"line\"><span class=\"keyword\">expect</span>(value).toBeGreaterThan(<span class=\"number\">3</span>); <span class=\"comment\">//大于3</span></span><br><span class=\"line\"><span class=\"keyword\">expect</span>(value).toBeGreaterThanOrEqual(<span class=\"number\">3.5</span>); <span class=\"comment\">//大于等于3.5</span></span><br><span class=\"line\"><span class=\"keyword\">expect</span>(value).toBeLessThan(<span class=\"number\">5</span>); <span class=\"comment\">//小于5</span></span><br><span class=\"line\"><span class=\"keyword\">expect</span>(value).toBeLessThanOrEqual(<span class=\"number\">4.5</span>); <span class=\"comment\">//小于等于4.5</span></span><br><span class=\"line\"><span class=\"keyword\">expect</span>(value).toBeCloseTo(<span class=\"number\">0.3</span>); <span class=\"comment\">// 浮点数判断相等</span></span><br><span class=\"line\"><span class=\"keyword\">expect</span>(<span class=\"string\">&#x27;Christoph&#x27;</span>).toMatch(/stop/); <span class=\"comment\">//正则表达式判断</span></span><br><span class=\"line\"><span class=\"keyword\">expect</span>([<span class=\"string\">&#x27;one&#x27;</span>,<span class=\"string\">&#x27;two&#x27;</span>]).toContain(<span class=\"string\">&#x27;one&#x27;</span>); <span class=\"comment\">//不解释</span></span><br><span class=\"line\"></span><br><span class=\"line\">function compileAndroidCode() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> new ConfigError(<span class=\"string\">&#x27;you are using the wrong JDK&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;compiling android goes as expected&#x27;</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">expect</span>(compileAndroidCode).toThrow();</span><br><span class=\"line\">  <span class=\"keyword\">expect</span>(compileAndroidCode).toThrow(ConfigError); <span class=\"comment\">//判断抛出异常</span></span><br><span class=\"line\">&#125;）</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://links.jianshu.com/go?to=https://jestjs.io/docs/en/expect.html\">了解更多断点</a></p>\n<h5 id=\"5-运行测试\"><a href=\"#5-运行测试\" class=\"headerlink\" title=\"5. 运行测试\"></a>5. 运行测试</h5><ul>\n<li><p>运行测试<br> <code>npm test</code></p>\n</li>\n<li><p>使用 –watch 参数可以启动一个监控界面，当文件发生变化时，会便会运行相关的测试。<br> <code>npm test --watch</code></p>\n</li>\n<li><p>使用 –coverage 参数，测试结束时还会得到一份测试覆盖度报告，如下图。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm test --coverage</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><img src=\"/media/15983636140540.jpg\"></p>\n<h1 id=\"Jest-单元测试术语解析：describe、it、expect、test\"><a href=\"#Jest-单元测试术语解析：describe、it、expect、test\" class=\"headerlink\" title=\"Jest 单元测试术语解析：describe、it、expect、test\"></a>Jest 单元测试术语解析：describe、it、expect、test</h1><h5 id=\"jest测试代码片段\"><a href=\"#jest测试代码片段\" class=\"headerlink\" title=\"jest测试代码片段\"></a><code>jest</code>测试代码片段</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&quot;number test&quot;</span>, <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"title function_\">it</span>(<span class=\"string\">&#x27;1 is true&#x27;</span>, <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">expect</span>(<span class=\"number\">1</span>).<span class=\"title function_\">toBeTruthy</span>()</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"title function_\">test</span>(<span class=\"string\">&#x27;2 is true&#x27;</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">expect</span>(<span class=\"number\">2</span>).<span class=\"title function_\">toBeTruthy</span>()</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"number\">12345678</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>describe</strong> 描述, <code>decribe</code>会形成一个作用域</li>\n<li><strong>it</strong> 断言</li>\n<li><strong>expect</strong> 期望</li>\n<li><strong>test</strong> 测试，类似<code>it</code></li>\n</ul>\n","text":"1. 介绍Jest是 Facebook 的一套开源的 JavaScript 测试框架， 它自动集成了断言、JSDom、覆盖率报告等开发者所需要的所有测试工具，是...","permalink":"/post/其他/Jest/Jest入门笔记","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"Jest","slug":"Jest","count":3,"path":"api/tags/Jest.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">1. 介绍</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">2. 安装</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">3. 使用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-%E5%B8%B8%E7%94%A8%E6%96%AD%E7%82%B9\"><span class=\"toc-text\">4. 常用断点</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">5. 运行测试</span></a></li></ol></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Jest-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%9C%AF%E8%AF%AD%E8%A7%A3%E6%9E%90%EF%BC%9Adescribe%E3%80%81it%E3%80%81expect%E3%80%81test\"><span class=\"toc-text\">Jest 单元测试术语解析：describe、it、expect、test</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#jest%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5\"><span class=\"toc-text\">jest测试代码片段</span></a></li></ol>","author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"eslint入门笔记","uid":"d1e934425bd2164e83202854a7d7852f","slug":"其他/Eslint/eslint入门笔记","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:34.000Z","comments":true,"path":"api/articles/其他/Eslint/eslint入门笔记.json","keywords":null,"cover":null,"text":"Eslint 是什么编码规范每个程序员都有自己的编码习惯，最常见的莫过于： 有的人写代码一行代码结尾必须加分号 ;，有的人觉得不加分号 ; 更好看； 有的人写代...","permalink":"/post/其他/Eslint/eslint入门笔记","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"Eslint","slug":"Eslint","count":1,"path":"api/tags/Eslint.json"}],"author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"使用Jest对Vue组件进行单元测试","uid":"23849453bb676c7918a2ae11cb140881","slug":"其他/Jest/使用Jest对Vue组件进行单元测试","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.999Z","comments":true,"path":"api/articles/其他/Jest/使用Jest对Vue组件进行单元测试.json","keywords":null,"cover":[],"text":"使用Jest对Vue组件进行单元测试安装依赖 1npm install --save-dev @vue/test-utils vue-jest jest-tra...","permalink":"/post/其他/Jest/使用Jest对Vue组件进行单元测试","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Jest","slug":"Jest","count":3,"path":"api/tags/Jest.json"}],"author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}