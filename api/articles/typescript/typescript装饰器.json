{"title":"typescript装饰器","uid":"e755fa687ba8e5a830b46f785612d7d7","slug":"typescript/typescript装饰器","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.993Z","comments":true,"path":"api/articles/typescript/typescript装饰器.json","keywords":null,"cover":null,"content":"<h1 id=\"了解typescript装饰器\"><a href=\"#了解typescript装饰器\" class=\"headerlink\" title=\"了解typescript装饰器\"></a>了解typescript装饰器</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>装饰器是一种特殊类型的声明，它能够附加到类、类的函数、类属性、类函数的参数上，以达到修改类的行为</p></blockquote>\n<h3 id=\"一、装饰器的种类\"><a href=\"#一、装饰器的种类\" class=\"headerlink\" title=\"一、装饰器的种类\"></a>一、装饰器的种类</h3><ul>\n<li>根据装饰器的位置</li>\n</ul>\n<ol>\n<li>类装饰器</li>\n<li>类函数装饰器</li>\n<li>类属性装饰器</li>\n<li>类函数参数装饰器</li>\n</ol>\n<ul>\n<li>根据装饰器是否有参数</li>\n</ul>\n<ol>\n<li>无参数装饰器（一般装饰器）</li>\n<li>有参数装饰器（装饰器工厂）</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>装饰器是一项实验性特性，在未来的版本中可能会发生改变</p></blockquote>\n<p>若要启用实验性的装饰器特性，你必须在命令行或<code>tsconfig.json</code>里启用<code>experimentalDecorators</code>编译器选项：</p>\n<p><strong>命令行</strong>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc --target ES5 --experimentalDecorators</span><br></pre></td></tr></table></figure>\n\n<p><strong>tsconfig.json</strong>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;compilerOptions&quot;: &#123;</span><br><span class=\"line\">        &quot;target&quot;: &quot;ES5&quot;,</span><br><span class=\"line\">        &quot;experimentalDecorators&quot;: true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、类的装饰器\"><a href=\"#二、类的装饰器\" class=\"headerlink\" title=\"二、类的装饰器\"></a>二、类的装饰器</h2><ul>\n<li>1、类装饰器的写法</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function desc(target) &#123;</span><br><span class=\"line\">  console.log(&#x27;---------------类的装饰器参数 start------------------&#x27;);</span><br><span class=\"line\">  console.log(target); // 输出 [Function: Person]表示当前装饰的类</span><br><span class=\"line\">  console.log(&#x27;---------------类的装饰器参数 end------------------&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@desc // 使用装饰器</span><br><span class=\"line\">class Person &#123;</span><br><span class=\"line\">  public name: string | undefined;</span><br><span class=\"line\">  public age: number | 0;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor(name, age) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let p = new Person(&#x27;哈哈&#x27;, 20);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>2、使用类的装饰器扩展类的属性和方法</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function desc(target) &#123;</span><br><span class=\"line\">  console.log(&#x27;---------------类的装饰器参数 start------------------&#x27;);</span><br><span class=\"line\">  console.log(target);</span><br><span class=\"line\">  console.log(&#x27;---------------类的装饰器参数 end------------------&#x27;);</span><br><span class=\"line\">  return class extends target&#123; // 在react高阶组件中经常看到这种写法</span><br><span class=\"line\">    gender = &#x27;男&#x27;;</span><br><span class=\"line\">    say() &#123;</span><br><span class=\"line\">      console.log(this.name, this.age, this.gender);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@desc</span><br><span class=\"line\">class Person &#123;</span><br><span class=\"line\">  public name: string | undefined;</span><br><span class=\"line\">  public age: number | 0;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor(name, age) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let p = new Person(&#x27;哈哈&#x27;, 20);</span><br><span class=\"line\">console.log(p);</span><br><span class=\"line\">p.say();</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">---------------类的装饰器参数 start------------------</span><br><span class=\"line\">[Function: Person]</span><br><span class=\"line\">---------------类的装饰器参数 end------------------</span><br><span class=\"line\">class_1 &#123; name: &#x27;哈哈&#x27;, age: 20, gender: &#x27;男&#x27; &#125;</span><br><span class=\"line\">哈哈 20 男</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>3、使用装饰器修改类的构造函数(构造函数的重载、方法重载)</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function desc(target) &#123;</span><br><span class=\"line\">  return class extends target&#123;</span><br><span class=\"line\">    name = &#x27;我是重载后的&#x27;;</span><br><span class=\"line\">    sayHell() &#123;</span><br><span class=\"line\">      console.log(&#x27;我是重载后的&#x27;, this.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@desc</span><br><span class=\"line\">class Person &#123;</span><br><span class=\"line\">  public name: string | undefined;</span><br><span class=\"line\">  public age: number | 0;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    this.name = &#x27;哈哈&#x27;;</span><br><span class=\"line\">    this.age = 20;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  sayHell() &#123;</span><br><span class=\"line\">    console.log(&#x27;hello word&#x27;, this.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let p = new Person();</span><br><span class=\"line\">console.log(p);</span><br><span class=\"line\">p.sayHell();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>4、装饰器工厂的写法</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function desc(params: string) &#123;</span><br><span class=\"line\">  return function (targe: any) &#123;</span><br><span class=\"line\">    console.log(&#x27;---------------参数说明 start------------------&#x27;);</span><br><span class=\"line\">    console.log(&#x27;params&#x27;, params);</span><br><span class=\"line\">    console.log(&#x27;target&#x27;, targe);</span><br><span class=\"line\">    console.log(&#x27;---------------参数说明 end------------------&#x27;);</span><br><span class=\"line\">    // 直接在原型上扩展一个属性</span><br><span class=\"line\">    targe.prototype.apiUrl = params;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@desc(&#x27;http://www.baidu.com&#x27;)</span><br><span class=\"line\">class P &#123;</span><br><span class=\"line\">  say() &#123;</span><br><span class=\"line\">    console.log(&#x27;说话&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let p:any = new P();</span><br><span class=\"line\">console.log(p.apiUrl);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、类函数装饰器\"><a href=\"#三、类函数装饰器\" class=\"headerlink\" title=\"三、类函数装饰器\"></a>三、类函数装饰器</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>它应用到方法上，可以用来监视、修改、替换该方法</p></blockquote>\n<ul>\n<li>1、定义方式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function desc(target, key, descriptor) &#123;</span><br><span class=\"line\">  console.log(&#x27;---------------类的装饰器参数 start------------------&#x27;);</span><br><span class=\"line\">  console.log(&#x27;target&#x27;, target); // Person &#123; say: [Function] &#125; 表示类的原型</span><br><span class=\"line\">  console.log(&#x27;key&#x27;, key); // 被装饰的函数名</span><br><span class=\"line\">  console.log(&#x27;descriptor&#x27;, descriptor); // 被装饰的函数的对象属性</span><br><span class=\"line\">  console.log(&#x27;---------------类的装饰器参数 end------------------&#x27;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>2、使用</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\">  public name: string | undefined;</span><br><span class=\"line\">  public age: number | 0;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor(name, age) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @desc</span><br><span class=\"line\">  say() &#123;</span><br><span class=\"line\">    console.log(&#x27;说的方法&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>3、在装饰器中添加类的原型属性和原型方法</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function desc(target, key, descriptor) &#123;</span><br><span class=\"line\">  target.gender = &#x27;男&#x27;;</span><br><span class=\"line\">  target.foo = function () &#123;</span><br><span class=\"line\">    console.log(&#x27;我是原型上的方法&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 测试代码</span><br><span class=\"line\">let p = new Person(&#x27;哈哈&#x27;, 20);</span><br><span class=\"line\">console.log(p);</span><br><span class=\"line\">console.log(Person.prototype);</span><br><span class=\"line\">p.say();</span><br><span class=\"line\">console.log(p.gender); // 使用p原型链上的属性</span><br><span class=\"line\">p.foo() // 调用了p原型链上的方法</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>4、使用装饰器拦截函数的调用(替换)</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function desc(params: string) &#123;</span><br><span class=\"line\">  return function (target: any, key: string, descriptor: &#123;[propsName: string]: any&#125;) &#123;</span><br><span class=\"line\">    // 修改被装饰的函数的</span><br><span class=\"line\">    let method = descriptor.value;</span><br><span class=\"line\">    descriptor.value = function (...args: Array&lt;any&gt;) &#123;</span><br><span class=\"line\">      args = args.map(it =&gt; String(it));</span><br><span class=\"line\">      console.log(args);</span><br><span class=\"line\">      // method.apply(this, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Person &#123;</span><br><span class=\"line\">  public name: string | undefined;</span><br><span class=\"line\">  public age: number | 0;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor(name, age) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @desc(&#x27;装饰器上的参数&#x27;)</span><br><span class=\"line\">  say() &#123;</span><br><span class=\"line\">    console.log(&#x27;说的方法&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let p = new Person(&#x27;哈哈&#x27;, 20);</span><br><span class=\"line\">console.log(p);</span><br><span class=\"line\">p.say(123, 23, &#x27;你好&#x27;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>5、使用装饰器拦截函数的调用(附加新的功能)</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function desc(params: string) &#123;</span><br><span class=\"line\">  return function (target: any, key: string, descriptor: &#123;[propsName: string]: any&#125;) &#123;</span><br><span class=\"line\">    // 修改被装饰的函数的</span><br><span class=\"line\">    let method = descriptor.value;</span><br><span class=\"line\">    descriptor.value = function (...args: Array&lt;any&gt;) &#123;</span><br><span class=\"line\">      args = args.map(it =&gt; String(it));</span><br><span class=\"line\">      console.log(args);</span><br><span class=\"line\">      method.apply(this, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Person &#123;</span><br><span class=\"line\">  public name: string | undefined;</span><br><span class=\"line\">  public age: number | 0;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor(name, age) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @desc(&#x27;装饰器上的参数&#x27;)</span><br><span class=\"line\">  say(...args) &#123;</span><br><span class=\"line\">    console.log(&#x27;说的方法&#x27;, args)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let p = new Person(&#x27;哈哈&#x27;, 20);</span><br><span class=\"line\">console.log(p);</span><br><span class=\"line\">p.say(123, 23, &#x27;你好&#x27;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、类属性装饰器\"><a href=\"#四、类属性装饰器\" class=\"headerlink\" title=\"四、类属性装饰器\"></a>四、类属性装饰器</h2><ul>\n<li>1、定义方式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function desc(target, name) &#123;</span><br><span class=\"line\">  console.log(&#x27;---------------类属性装饰器的参数 start------------------&#x27;);</span><br><span class=\"line\">  console.log(&#x27;target&#x27;, target, target.constructor); // 表示类的原型</span><br><span class=\"line\">  console.log(&#x27;name&#x27;, name); // 表示被装饰属性名</span><br><span class=\"line\">  console.log(&#x27;---------------类属性装饰器的参数 end------------------&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Person &#123;</span><br><span class=\"line\">  public name: string | undefined;</span><br><span class=\"line\">  public age: number | 0;</span><br><span class=\"line\"></span><br><span class=\"line\">  @desc</span><br><span class=\"line\">  private gender: string | undefined;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor(name, age) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let p = new Person(&#x27;哈哈&#x27;, 20);</span><br><span class=\"line\">console.log(p);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>2、在装饰器中修改属性值</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function desc(target, name) &#123;</span><br><span class=\"line\">  target[name] = &#x27;女&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Person &#123;</span><br><span class=\"line\">  public name: string | undefined;</span><br><span class=\"line\">  public age: number | 0;</span><br><span class=\"line\"></span><br><span class=\"line\">  @desc</span><br><span class=\"line\">  public gender: string | undefined;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor(name, age) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  say() &#123;</span><br><span class=\"line\">    console.log(this.name, this.age, this.gender);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let p = new Person(&#x27;哈哈&#x27;, 20);</span><br><span class=\"line\">console.log(p);</span><br><span class=\"line\">p.say();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五、类函数参数的装饰器\"><a href=\"#五、类函数参数的装饰器\" class=\"headerlink\" title=\"五、类函数参数的装饰器\"></a>五、类函数参数的装饰器</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>参数装饰器表达式会在运行时候当做函数被调用，以使用参数装饰器为类的原型上附加一些元数据</p></blockquote>\n<ul>\n<li>1、使用方式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function desc(params: string) &#123;</span><br><span class=\"line\">  return function (target: any, key, index) &#123;</span><br><span class=\"line\">    console.log(&#x27;---------------参数装饰器 start------------------&#x27;);</span><br><span class=\"line\">    console.log(target); // 类的原型</span><br><span class=\"line\">    console.log(key); // 被装饰的名字</span><br><span class=\"line\">    console.log(index); // 序列化</span><br><span class=\"line\">    console.log(&#x27;---------------参数装饰器 end------------------&#x27;);</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Person &#123;</span><br><span class=\"line\">  public name: string | undefined;</span><br><span class=\"line\">  public age: number | 0;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor(name, age) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  say(@desc(&#x27;参数装饰器&#x27;) age: number) &#123;</span><br><span class=\"line\">    console.log(&#x27;说的方法&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let p = new Person(&#x27;哈哈&#x27;, 20);</span><br><span class=\"line\">console.log(p);</span><br><span class=\"line\">p.say(20);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>2、为类的原型上添加一些东西</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function desc(params: string) &#123;</span><br><span class=\"line\">  return function (target: any, key, index) &#123;</span><br><span class=\"line\">    console.log(&#x27;---------------参数装饰器 start------------------&#x27;);</span><br><span class=\"line\">    console.log(target); // 类的原型</span><br><span class=\"line\">    console.log(key); // 被装饰的名字</span><br><span class=\"line\">    console.log(index); // 序列化</span><br><span class=\"line\">    target.message = params;</span><br><span class=\"line\">    console.log(&#x27;---------------参数装饰器 end------------------&#x27;);</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Person &#123;</span><br><span class=\"line\">  public name: string | undefined;</span><br><span class=\"line\">  public age: number | 0;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor(name, age) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  say(@desc(&#x27;参数装饰器&#x27;) age: number) &#123;</span><br><span class=\"line\">    console.log(&#x27;说的方法&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let p: any = new Person(&#x27;哈哈&#x27;, 20);</span><br><span class=\"line\">console.log(p);</span><br><span class=\"line\">p.say(20);</span><br><span class=\"line\">console.log(p.message)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"六、几种装饰器的执行顺序\"><a href=\"#六、几种装饰器的执行顺序\" class=\"headerlink\" title=\"六、几种装饰器的执行顺序\"></a>六、几种装饰器的执行顺序</h2><ul>\n<li>1、测试代码</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function logCls(params: string) &#123;</span><br><span class=\"line\">  return function (target: any) &#123;</span><br><span class=\"line\">    console.log(&#x27;4.类的装饰器&#x27;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function logMehod(params: string) &#123;</span><br><span class=\"line\">  return function (target: any, key: string, descriptor: &#123;[propsName: string]: any&#125;) &#123;</span><br><span class=\"line\">    console.log(&#x27;3.类的函数装饰器&#x27;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function logParams(params: string) &#123;</span><br><span class=\"line\">  return function (target: any, name: string) &#123;</span><br><span class=\"line\">    console.log(&#x27;1.类属性装饰器&#x27;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function logQuery(params: string) &#123;</span><br><span class=\"line\">  return function (target: any, key: string, index: number) &#123;</span><br><span class=\"line\">    console.log(&#x27;2.函数参数装饰器&#x27;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@logCls(&#x27;类的装饰器&#x27;)</span><br><span class=\"line\">class Person&#123;</span><br><span class=\"line\">  @logParams(&#x27;属性装饰器&#x27;)</span><br><span class=\"line\">  public name: string | undefined;</span><br><span class=\"line\"></span><br><span class=\"line\">  @logMehod(&#x27;函数装饰器&#x27;)</span><br><span class=\"line\">  getData(@logQuery(&#x27;函数参数装饰器&#x27;) age: number, @logQuery(&#x27;函数参数装饰器&#x27;) gender: string) &#123;</span><br><span class=\"line\">    console.log(&#x27;----&#x27;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>2、运行结果</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.类属性装饰器</span><br><span class=\"line\">2.函数参数装饰器</span><br><span class=\"line\">3.类的函数装饰器</span><br><span class=\"line\">4.类的装饰器</span><br></pre></td></tr></table></figure>","text":"了解typescript装饰器 装饰器是一种特殊类型的声明，它能够附加到类、类的函数、类属性、类函数的参数上，以达到修改类的行为 一、装饰器的种类 根据装饰器的...","permalink":"/post/typescript/typescript装饰器","photos":[],"count_time":{"symbolsCount":"9.4k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"typescript","slug":"typescript","count":1,"path":"api/tags/typescript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%86%E8%A7%A3typescript%E8%A3%85%E9%A5%B0%E5%99%A8\"><span class=\"toc-text\">了解typescript装饰器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E7%A7%8D%E7%B1%BB\"><span class=\"toc-text\">一、装饰器的种类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E7%B1%BB%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8\"><span class=\"toc-text\">二、类的装饰器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E7%B1%BB%E5%87%BD%E6%95%B0%E8%A3%85%E9%A5%B0%E5%99%A8\"><span class=\"toc-text\">三、类函数装饰器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E7%B1%BB%E5%B1%9E%E6%80%A7%E8%A3%85%E9%A5%B0%E5%99%A8\"><span class=\"toc-text\">四、类属性装饰器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E7%B1%BB%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8\"><span class=\"toc-text\">五、类函数参数的装饰器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81%E5%87%A0%E7%A7%8D%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">六、几种装饰器的执行顺序</span></a></li></ol></li></ol>","author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"初始化一个react项目","uid":"62c1067b8dc3136f28f0726e0181c9fa","slug":"react/初始化一个react项目","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.993Z","comments":true,"path":"api/articles/react/初始化一个react项目.json","keywords":null,"cover":null,"text":"使用 create-react-app 快速构建 React 开发环境create-react-app 是来自于 Facebook，通过该命令我们无需配置就能快...","permalink":"/post/react/初始化一个react项目","photos":[],"count_time":{"symbolsCount":266,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"react","slug":"react","count":2,"path":"api/tags/react.json"}],"author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"1. vscode插件开发准备","uid":"d4d2f14b32186159d88bc0a11749967b","slug":"vscode插件开发/1. vscode插件开发准备","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.993Z","comments":true,"path":"api/articles/vscode插件开发/1. vscode插件开发准备.json","keywords":null,"cover":[],"text":"VSCode插件开发所有笔记均参考于 https://www.cnblogs.com/liuxianan/p/vscode-plugin-overview.ht...","permalink":"/post/vscode插件开发/1. vscode插件开发准备","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"vscode插件开发","slug":"vscode插件开发","count":7,"path":"api/tags/vscode插件开发.json"}],"author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}