{"title":"6.智联招聘一面和二面","uid":"ff00ce35a2f14eec99334118a6d1eec3","slug":"面试题/6.智联招聘一面和二面","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.993Z","comments":true,"path":"api/articles/面试题/6.智联招聘一面和二面.json","keywords":null,"cover":null,"content":"<ol>\n<li>css水平居中，垂直居中的几种实现方式</li>\n<li>Position定位都有哪些</li>\n<li>数组有哪些属性或方法</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JavaScript 数组的常用属性和方法包括：</span><br><span class=\"line\"></span><br><span class=\"line\">属性:</span><br><span class=\"line\"></span><br><span class=\"line\">length</span><br><span class=\"line\">方法:</span><br><span class=\"line\"></span><br><span class=\"line\">concat()</span><br><span class=\"line\">copyWithin()</span><br><span class=\"line\">entries()</span><br><span class=\"line\">every()</span><br><span class=\"line\">fill()</span><br><span class=\"line\">filter()</span><br><span class=\"line\">find()</span><br><span class=\"line\">findIndex()</span><br><span class=\"line\">flat()</span><br><span class=\"line\">flatMap()</span><br><span class=\"line\">forEach()</span><br><span class=\"line\">includes()</span><br><span class=\"line\">indexOf()</span><br><span class=\"line\">isArray()</span><br><span class=\"line\">join()</span><br><span class=\"line\">keys()</span><br><span class=\"line\">lastIndexOf()</span><br><span class=\"line\">map()</span><br><span class=\"line\">pop()</span><br><span class=\"line\">push()</span><br><span class=\"line\">reduce()</span><br><span class=\"line\">reduceRight()</span><br><span class=\"line\">reverse()</span><br><span class=\"line\">shift()</span><br><span class=\"line\">slice()</span><br><span class=\"line\">some()</span><br><span class=\"line\">sort()</span><br><span class=\"line\">splice()</span><br><span class=\"line\">toLocaleString()</span><br><span class=\"line\">toString()</span><br><span class=\"line\">unshift()</span><br><span class=\"line\">values()</span><br><span class=\"line\">这些是JavaScript数组对象中最常用的属性和方法。</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>Object有哪些属性和方法</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">属性:</span><br><span class=\"line\"></span><br><span class=\"line\">prototype</span><br><span class=\"line\">方法:</span><br><span class=\"line\"></span><br><span class=\"line\">assign()</span><br><span class=\"line\">create()</span><br><span class=\"line\">defineProperties()</span><br><span class=\"line\">defineProperty()</span><br><span class=\"line\">entries()</span><br><span class=\"line\">freeze()</span><br><span class=\"line\">fromEntries()</span><br><span class=\"line\">getOwnPropertyDescriptor()</span><br><span class=\"line\">getOwnPropertyDescriptors()</span><br><span class=\"line\">getOwnPropertyNames()</span><br><span class=\"line\">getOwnPropertySymbols()</span><br><span class=\"line\">getPrototypeOf()</span><br><span class=\"line\">is()</span><br><span class=\"line\">isExtensible()</span><br><span class=\"line\">isFrozen()</span><br><span class=\"line\">isSealed()</span><br><span class=\"line\">keys()</span><br><span class=\"line\">preventExtensions()</span><br><span class=\"line\">seal()</span><br><span class=\"line\">setPrototypeOf()</span><br><span class=\"line\">values()</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li><p>介绍一下Promise</p>\n</li>\n<li><p>webpack有哪些hash类型</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在 Webpack 中，常用的哈希(hash)类型有以下几种：</span><br><span class=\"line\"></span><br><span class=\"line\">hash - 模块标识符的哈希值，对整个项目构建有效。</span><br><span class=\"line\">chunkhash - 依赖于 chunk 的内容。</span><br><span class=\"line\">contenthash - 依赖于文件内容，适用于样式文件等。</span><br><span class=\"line\">这些哈希类型在 Webpack 的配置中经常用于缓存管理和文件版本控制。</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li><p>type和interface的区别</p>\n</li>\n<li><p>vue的key有啥作用</p>\n</li>\n<li><p>vue的data为啥是函数而不是对象</p>\n</li>\n<li><h2 id=\"Vue-2-和-Vue-3的区别\"><a href=\"#Vue-2-和-Vue-3的区别\" class=\"headerlink\" title=\"Vue 2 和 Vue 3的区别\"></a>Vue 2 和 Vue 3的区别</h2></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue 2 和 Vue 3 在多个方面有显著区别，以下是一些主要差异：</span><br><span class=\"line\"></span><br><span class=\"line\">组合式 API:</span><br><span class=\"line\"></span><br><span class=\"line\">Vue 3 引入了组合式 API (setup 函数、ref、reactive 等)，提供更灵活的组件逻辑复用方式。</span><br><span class=\"line\">Vue 2 主要使用选项式 API（data、methods、computed 等）。</span><br><span class=\"line\">性能改进:</span><br><span class=\"line\"></span><br><span class=\"line\">Vue 3 提供了更好的性能，包括更小的打包大小和更快的渲染速度。</span><br><span class=\"line\">这得益于 Vue 3 的虚拟 DOM 重写和树摇(tree-shaking)支持。</span><br><span class=\"line\">Composition API vs Options API:</span><br><span class=\"line\"></span><br><span class=\"line\">Vue 3 的 Composition API 使得逻辑重用和代码组织更加灵活。</span><br><span class=\"line\">Vue 2 的 Options API 在组件变得复杂时，相关功能的代码可能会分散在不同的选项中。</span><br><span class=\"line\">响应式系统:</span><br><span class=\"line\"></span><br><span class=\"line\">Vue 3 使用了基于 Proxy 的响应式系统，这带来了更好的性能和更丰富的功能。</span><br><span class=\"line\">Vue 2 使用了基于 Object.defineProperty 的响应式系统。</span><br><span class=\"line\">TypeScript 支持:</span><br><span class=\"line\"></span><br><span class=\"line\">Vue 3 从一开始就以 TypeScript 编写，提供更好的 TypeScript 支持。</span><br><span class=\"line\">Vue 2 的 TypeScript 支持是后来添加的，不如 Vue 3 紧密集成。</span><br><span class=\"line\">新的生命周期钩子:</span><br><span class=\"line\"></span><br><span class=\"line\">Vue 3 引入了新的生命周期钩子，如 onMounted、onUpdated 等，与组合式 API 结合使用。</span><br><span class=\"line\">模板特性和改进:</span><br><span class=\"line\"></span><br><span class=\"line\">Vue 3 引入了一些新的模板特性，如 Fragment、Teleport、Suspense 等。</span><br><span class=\"line\">全局 API 和应用实例:</span><br><span class=\"line\"></span><br><span class=\"line\">Vue 3 引入了应用实例 (createApp)，减少了全局 API 的使用，使得多个 Vue 应用能更容易共存。</span><br><span class=\"line\">这些变化使 Vue 3 更加灵活和强大，同时保留了 Vue 的核心特性，如易用性和轻量级。对于新项目，Vue 3 是一个更好的选择，但 Vue 2 仍然是一个稳定且功能丰富的选择。</span><br></pre></td></tr></table></figure>\n\n<ol start=\"11\">\n<li>re f和reactive的区别</li>\n</ol>\n<p>12.常见的请求头</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.Accept</span><br><span class=\"line\">Accept: text/html 浏览器可以接受服务器回发的类型为 text/html。</span><br><span class=\"line\">Accept: */* 代表浏览器可以处理所有类型,(一般浏览器发给服务器都是发这个)。</span><br><span class=\"line\">2.Accept-Encoding</span><br><span class=\"line\">Accept-Encoding: gzip, deflate 浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法（gzip，deflate），（注意：这不是只字符编码）。</span><br><span class=\"line\"></span><br><span class=\"line\">3.Accept-Language</span><br><span class=\"line\">Accept-Language:zh-CN,zh;q=0.9 浏览器申明自己接收的语言。</span><br><span class=\"line\"></span><br><span class=\"line\">4.Connection</span><br><span class=\"line\">Connection: keep-alive 当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。</span><br><span class=\"line\">Connection: close 代表一个Request完成后，客户端和服务器之间用于传输HTTP数据的TCP连接会关闭， 当客户端再次发送Request，需要重新建立TCP连接。</span><br><span class=\"line\">5.Host（发送请求时，该报头域是必需的）</span><br><span class=\"line\">Host:www.baidu.com 请求报头域主要用于指定被请求资源的Internet主机和端口号，它通常从HTTP URL中提取出来的。</span><br><span class=\"line\"></span><br><span class=\"line\">6.Referer</span><br><span class=\"line\">Referer:https://www.baidu.com/?tn=62095104_8_oem_dg 当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器籍此可以获得一些信息用于处理。</span><br><span class=\"line\"></span><br><span class=\"line\">7.User-Agent</span><br><span class=\"line\">User-Agent:Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36 告诉HTTP服务器， 客户端使用的操作系统和浏览器的名称和版本。</span><br><span class=\"line\"></span><br><span class=\"line\">8.Cache-Control</span><br><span class=\"line\">Cache-Control:private 默认为private 响应只能够作为私有的缓存，不能再用户间共享</span><br><span class=\"line\">Cache-Control:public 响应会被缓存，并且在多用户间共享。正常情况, 如果要求HTTP认证,响应会自动设置为 private.</span><br><span class=\"line\">Cache-Control:must-revalidate 响应在特定条件下会被重用，以满足接下来的请求，但是它必须到服务器端去验证它是不是仍然是最新的。</span><br><span class=\"line\">Cache-Control:no-cache 响应不会被缓存,而是实时向服务器端请求资源。</span><br><span class=\"line\">Cache-Control:max-age=10 设置缓存最大的有效时间，但是这个参数定义的是时间大小（比如：60）而不是确定的时间点。单位是[秒 seconds]。</span><br><span class=\"line\">Cache-Control:no-store 在任何条件下，响应都不会被缓存，并且不会被写入到客户端的磁盘里，这也是基于安全考虑的某些敏感的响应才会使用这个。</span><br><span class=\"line\">9.Cookie</span><br><span class=\"line\">Cookie是用来存储一些用户信息以便让服务器辨别用户身份的（大多数需要登录的网站上面会比较常见），比如cookie会存储一些用户的用户名和密码，当用户登录后就会在客户端产生一个cookie来存储相关信息，这样浏览器通过读取cookie的信息去服务器上验证并通过后会判定你是合法用户，从而允许查看相应网页。当然cookie里面的数据不仅仅是上述范围，还有很多信息可以存储是cookie里面，比如sessionid等。</span><br><span class=\"line\"></span><br><span class=\"line\">10.Range（用于断点续传）</span><br><span class=\"line\">Range:bytes=0-5 指定第一个字节的位置和最后一个字节的位置。用于告诉服务器自己想取对象的哪部分。</span><br><span class=\"line\"></span><br><span class=\"line\">二、常用的http响应头</span><br><span class=\"line\">1.Cache-Control（对应请求中的Cache-Control）</span><br><span class=\"line\">Cache-Control:private 默认为private 响应只能够作为私有的缓存，不能再用户间共享Cache-Control:public 浏览器和缓存服务器都可以缓存页面信息。</span><br><span class=\"line\">Cache-Control:must-revalidate 对于客户机的每次请求，代理服务器必须想服务器验证缓存是否过时。</span><br><span class=\"line\">Cache-Control:no-cache 浏览器和缓存服务器都不应该缓存页面信息。Cache-Control:max-age=10 是通知浏览器10秒之内不要烦我，自己从缓冲区中刷新。</span><br><span class=\"line\">Cache-Control:no-store 请求和响应的信息都不应该被存储在对方的磁盘系统中。</span><br><span class=\"line\">2.Content-Type</span><br><span class=\"line\">Content-Type：text/html;charset=UTF-8 告诉客户端，资源文件的类型，还有字符编码，客户端通过utf-8对资源进行解码，然后对资源进行html解析。通常我们会看到有些网站是乱码的，往往就是服务器端没有返回正确的编码。</span><br><span class=\"line\"></span><br><span class=\"line\">3.Content-Encoding</span><br><span class=\"line\">Content-Encoding:gzip 告诉客户端，服务端发送的资源是采用gzip编码的，客户端看到这个信息后，应该采用gzip对资源进行解码。</span><br><span class=\"line\"></span><br><span class=\"line\">4.Date</span><br><span class=\"line\">Date: Tue, 03 Apr 2018 03:52:28 GMT 这个是服务端发送资源时的服务器时间，GMT是格林尼治所在地的标准时间。http协议中发送的时间都是GMT的，这主要是解决在互联网上，不同时区在相互请求资源的时候，时间混乱问题。</span><br><span class=\"line\"></span><br><span class=\"line\">5.Server</span><br><span class=\"line\">Server：Tengine/1.4.6 这个是服务器和相对应的版本，只是告诉客户端服务器信息。</span><br><span class=\"line\"></span><br><span class=\"line\">6.Transfer-Encoding</span><br><span class=\"line\">Transfer-Encoding：chunked 这个响应头告诉客户端，服务器发送的资源的方式是分块发送的。一般分块发送的资源都是服务器动态生成的，在发送时还不知道发送资源的大小，所以采用分块发送，每一块都是独立的，独立的块都能标示自己的长度，最后一块是0长度的，当客户端读到这个0长度的块时，就可以确定资源已经传输完了。</span><br><span class=\"line\"></span><br><span class=\"line\">7.Expires</span><br><span class=\"line\">Expires:Sun, 1 Jan 2000 01:00:00 GMT 这个响应头也是跟缓存有关的，告诉客户端在这个时间前，可以直接访问缓存副本，很显然这个值会存在问题，因为客户端和服务器的时间不一定会都是相同的，如果时间不同就会导致问题。所以这个响应头是没有Cache-Control：max-age=*这个响应头准确的，因为max-age=date中的date是个相对时间，不仅更好理解，也更准确。</span><br><span class=\"line\"></span><br><span class=\"line\">8.Last-Modified</span><br><span class=\"line\">Last-Modified: Dec, 26 Dec 2015 17:30:00 GMT 所请求的对象的最后修改日期(按照 RFC 7231 中定义的“超文本传输协议日期”格式来表示)</span><br><span class=\"line\"></span><br><span class=\"line\">9.Connection</span><br><span class=\"line\">Connection：keep-alive 这个字段作为回应客户端的Connection：keep-alive，告诉客户端服务器的tcp连接也是一个长连接，客户端可以继续使用这个tcp连接发送http请求。</span><br><span class=\"line\"></span><br><span class=\"line\">10.Etag</span><br><span class=\"line\">ETag: &quot;737060cd8c284d8af7ad3082f209582d&quot; 就是一个对象（比如URL）的标志值，就一个对象而言，比如一个html文件，如果被修改了，其Etag也会别修改，所以，ETag的作用跟Last-Modified的作用差不多，主要供WEB服务器判断一个对象是否改变了。比如前一次请求某个html文件时，获得了其 ETag，当这次又请求这个文件时，浏览器就会把先前获得ETag值发送给WEB服务器，然后WEB服务器会把这个ETag跟该文件的当前ETag进行对比，然后就知道这个文件有没有改变了。</span><br><span class=\"line\"></span><br><span class=\"line\">11.Refresh</span><br><span class=\"line\">Refresh: 5; url=http://baidu.com 用于重定向，或者当一个新的资源被创建时。默认会在5秒后刷新重定向。</span><br><span class=\"line\"></span><br><span class=\"line\">12.Access-Control-Allow-Origin</span><br><span class=\"line\">Access-Control-Allow-Origin: *号代表所有网站可以跨域资源共享，如果当前字段为那么Access-Control-Allow-Credentials就不能为true</span><br><span class=\"line\">Access-Control-Allow-Origin: www.baidu.com 指定哪些网站可以跨域资源共享</span><br><span class=\"line\">13.Access-Control-Allow-Methods</span><br><span class=\"line\">Access-Control-Allow-Methods：GET,POST,PUT,DELETE 允许哪些方法来访问</span><br><span class=\"line\"></span><br><span class=\"line\">14.Access-Control-Allow-Credentials</span><br><span class=\"line\">Access-Control-Allow-Credentials: true 是否允许发送cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。如果access-control-allow-origin为*，当前字段就不能为true</span><br><span class=\"line\"></span><br><span class=\"line\">15.Content-Range</span><br><span class=\"line\">Content-Range: bytes 0-5/7877 指定整个实体中的一部分的插入位置，他也指示了整个实体的长度。在服务器向客户返回一个部分响应，它必须描述响应覆盖的范围和整个实体长度。</span><br></pre></td></tr></table></figure>\n\n\n\n","text":" css水平居中，垂直居中的几种实现方式 Position定位都有哪些 数组有哪些属性或方法 123456789101112131415161718192021...","permalink":"/post/面试题/6.智联招聘一面和二面","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"面试题","slug":"面试题","count":16,"path":"api/tags/面试题.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Vue-2-%E5%92%8C-Vue-3%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">Vue 2 和 Vue 3的区别</span></a></li></ol>","author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"8.途家一面","uid":"df6f60ca2a548c4bb3e07a9eadb3264a","slug":"面试题/8.途家一面","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.993Z","comments":true,"path":"api/articles/面试题/8.途家一面.json","keywords":null,"cover":null,"text":" js的数据类型 js怎么理解闭包，有哪些应用场景 事件循环机制 对原型和原型链怎么理解 j s深拷贝 变量声明提升 js异步的理解 js的垃圾回收机制 123...","permalink":"/post/面试题/8.途家一面","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"面试题","slug":"面试题","count":16,"path":"api/tags/面试题.json"}],"author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"9.美团一面","uid":"9b6f7175aa7ad59c5476f0295f502b50","slug":"面试题/9.美团一面","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.993Z","comments":true,"path":"api/articles/面试题/9.美团一面.json","keywords":null,"cover":null,"text":" v-if和v-show的区别 vue2和vue3区别 看代码的输出结果 ","permalink":"/post/面试题/9.美团一面","photos":[],"count_time":{"symbolsCount":39,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"面试题","slug":"面试题","count":16,"path":"api/tags/面试题.json"}],"author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}