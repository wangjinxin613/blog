{"title":"3.交研智慧一面","uid":"edc763cbfc515ed7263e9656729e3c28","slug":"面试题/3.交研智慧一面","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.993Z","comments":true,"path":"api/articles/面试题/3.交研智慧一面.json","keywords":null,"cover":[],"content":"<ol>\n<li>详细介绍一个项目</li>\n<li>seviceWorker和普通缓存有啥区别</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Service Worker 和普通的缓存机制在功能和使用场景上存在明显的区别。</span><br><span class=\"line\"></span><br><span class=\"line\">普通缓存：</span><br><span class=\"line\">普通缓存通常指的是浏览器对网页资源的存储机制。当用户请求一个网页或资源时，浏览器会将获取到的资源（如 HTML、CSS、JavaScript、图片等）存储在本地的缓存中。如果用户再次请求相同的网页或资源，浏览器会首先检查缓存中是否存在该资源，如果存在，则直接从缓存中获取，避免了再次从服务器下载。这样可以提高网页的加载速度，减少网络请求的次数。</span><br><span class=\"line\"></span><br><span class=\"line\">普通缓存是一种通用的浏览器缓存机制，适用于所有网页和资源。它具有以下特点：</span><br><span class=\"line\"></span><br><span class=\"line\">自动缓存：浏览器会自动缓存用户访问过的网页和资源。</span><br><span class=\"line\">持久性：缓存的资源可以在一段时间内保持有效，甚至在浏览器关闭后重新打开时仍然可用。</span><br><span class=\"line\">无法控制：开发者无法直接控制普通缓存的机制和行为，只能通过设置 HTTP 头部的缓存控制策略来影响缓存行为。</span><br><span class=\"line\">Service Worker：</span><br><span class=\"line\">Service Worker 是一种由浏览器在后台独立于网页运行的脚本，通常用于处理网络请求和实现离线功能。它是一种更高级的缓存机制，允许开发者通过编程方式控制网页资源的缓存和网络请求。</span><br><span class=\"line\"></span><br><span class=\"line\">Service Worker 具有以下特点：</span><br><span class=\"line\"></span><br><span class=\"line\">可编程性：Service Worker 可以由开发者编写自定义的 JavaScript 代码来控制资源的缓存和网络请求。可以通过拦截请求、响应和处理离线事件等方式，实现自定义的缓存策略和离线功能。</span><br><span class=\"line\">生命周期独立：Service Worker 的生命周期独立于网页的生命周期，可以在网页关闭后仍然运行。因此，它可以实现离线功能，如离线推送、离线同步等。</span><br><span class=\"line\">资源限制：Service Worker 的资源使用受到限制，例如存储空间和并发连接数等。因此，需要谨慎管理和优化资源的使用。</span><br><span class=\"line\">安全性和隔离：Service Worker 在运行时具有安全性和隔离性。它无法访问 DOM 和其他浏览器 API，同时与其他 Service Worker 之间也相互隔离。</span><br><span class=\"line\">总结起来，普通缓存是一种自动的、持久的、无法控制的浏览器缓存机制，适用于所有网页和资源；而 Service Worker 是一种可编程的、独立的、有资源限制的缓存机制，主要用于实现离线功能和更高级的网络请求处理。</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>React做过什么项目</li>\n<li>在写代码过程中哪些东西会影响代码质量和稳定性</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在写代码过程中，许多因素都会影响代码质量和稳定性，以下是一些主要的因素：</span><br><span class=\"line\"></span><br><span class=\"line\">需求和设计：需求和设计是影响代码质量和稳定性的重要因素。如果需求和设计不清晰、不完整或者不合理，那么代码的质量和稳定性就很难得到保证。因此，在开发过程中，需要充分了解需求和设计，并及时与相关人员进行沟通和反馈。</span><br><span class=\"line\">编码规范和标准：编码规范和标准是保证代码质量和稳定性的重要工具。通过遵循统一的编码规范和标准，可以减少代码的错误率和维护难度，提高代码的可读性和可维护性。</span><br><span class=\"line\">代码结构和设计模式：良好的代码结构和设计模式可以提高代码的可读性、可维护性和可扩展性，从而保证代码的质量和稳定性。因此，在编写代码时，应该注重代码的结构和设计模式的选择。</span><br><span class=\"line\">测试和质量保证：测试和质量保证是保证代码质量和稳定性的重要手段。通过编写测试用例、进行单元测试、集成测试和系统测试等，可以发现和修复代码中的错误和缺陷，提高代码的质量和稳定性。</span><br><span class=\"line\">代码审查和文档：代码审查和文档是保证代码质量和稳定性的重要工具。通过进行代码审查可以发现代码中的问题和缺陷，并及时进行修复；同时编写文档可以方便后续的维护和理解。</span><br><span class=\"line\">版本控制和持续集成：版本控制和持续集成可以提高代码的质量和稳定性。通过使用版本控制工具可以方便地跟踪和管理代码的变化；而持续集成可以及时发现和修复问题，保证代码的质量和稳定性。</span><br><span class=\"line\">团队协作和沟通：团队协作和沟通也是影响代码质量和稳定性的重要因素。通过良好的团队协作和沟通，可以保证信息的及时传递和理解，避免因误解或沟通不畅而导致的错误和缺陷。</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>常用的设计模式有哪些</li>\n</ol>\n<p><img src=\"https://pics4.baidu.com/feed/b90e7bec54e736d1500c90fde2012fc4d46269fb.jpeg@f_auto?token=bb768359f1448f12ffcc33172f88c9fa\" alt=\"img\"></p>\n<ol start=\"6\">\n<li>渲染的性能问题如何解决</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前端的渲染性能问题可以从以下几个方面进行优化：</span><br><span class=\"line\"></span><br><span class=\"line\">合并请求：过多的请求会增加网络延迟，影响渲染速度。可以通过合并请求来减少网络延迟。</span><br><span class=\"line\">缓存策略：使用缓存策略，如浏览器缓存、CDN缓存等，可以减少每次加载资源的时间，提高渲染速度。</span><br><span class=\"line\">异步加载和延迟渲染：对于一些非关键资源，可以采取异步加载和延迟渲染的策略，即在页面加载后再进行渲染，从而提高页面的初始加载速度。</span><br><span class=\"line\">优化图片：对于图片资源，可以通过优化图片格式、压缩图片大小、使用懒加载等方式来减少加载时间和渲染时间。</span><br><span class=\"line\">使用CDN：使用CDN可以将资源存储在全球各地的服务器上，让用户从最近的服务器获取资源，减少加载时间和网络延迟。</span><br><span class=\"line\">优化代码：通过优化代码来减少渲染时间也是一种有效的方法。例如，避免使用过多的嵌套样式、避免使用过于复杂的JavaScript表达式等。</span><br><span class=\"line\">使用前端性能工具：使用前端性能工具可以对页面性能进行监测和优化，帮助开发者发现和解决性能问题。</span><br><span class=\"line\">综上所述，前端的渲染性能问题可以通过合并请求、缓存策略、异步加载和延迟渲染、优化图片、使用CDN、优化代码以及使用前端性能工具等多种方式进行优化和解决。</span><br></pre></td></tr></table></figure>\n\n","text":" 详细介绍一个项目 seviceWorker和普通缓存有啥区别 1234567891011121314151617181920Service Worker 和普...","permalink":"/post/面试题/3.交研智慧一面","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"面试题","slug":"面试题","count":16,"path":"api/tags/面试题.json"}],"toc":"","author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"2.交易所一面","uid":"a27f8cb4a0e9f55c9e8d2da96f3e5630","slug":"面试题/2.交易所一面","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.993Z","comments":true,"path":"api/articles/面试题/2.交易所一面.json","keywords":null,"cover":null,"text":" Vue3和vue2有啥区别 12345678910111213141516171819202122232425262728293031323334353637...","permalink":"/post/面试题/2.交易所一面","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"面试题","slug":"面试题","count":16,"path":"api/tags/面试题.json"}],"author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"4.八月瓜一面","uid":"b4ebdb6509523e7ae3421c10b60ef62f","slug":"面试题/4.八月瓜一面","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.993Z","comments":true,"path":"api/articles/面试题/4.八月瓜一面.json","keywords":null,"cover":null,"text":" vue模版编译原理 https://zhuanlan.zhihu.com/p/621318626 js文档碎片 Vue文档碎片是一个容器，用于暂时存放创建的D...","permalink":"/post/面试题/4.八月瓜一面","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"面试题","slug":"面试题","count":16,"path":"api/tags/面试题.json"}],"author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}