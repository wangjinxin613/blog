{"title":"4.八月瓜一面","uid":"b4ebdb6509523e7ae3421c10b60ef62f","slug":"面试题/4.八月瓜一面","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.993Z","comments":true,"path":"api/articles/面试题/4.八月瓜一面.json","keywords":null,"cover":null,"content":"<ol>\n<li>vue模版编译原理</li>\n</ol>\n<p><a href=\"https://zhuanlan.zhihu.com/p/621318626\">https://zhuanlan.zhihu.com/p/621318626</a></p>\n<ol start=\"2\">\n<li>js文档碎片</li>\n</ol>\n<p>Vue文档碎片是一个容器，用于暂时存放创建的DOM元素。具体来说，在Vue中，当需要添加大量元素时，可以先将这些元素添加到文档碎片中，然后再将文档碎片添加到需要插入的位置，这样可以大大减少DOM操作，提高性能。文档碎片的使用类似于先让元素进入到一个容器中，然后再使用appendChild方法将这个容器添加到需要插入的位置。</p>\n<p>文档碎片可以提高DOM操作的性能，因为每次对DOM的操作都会触发“重排”，这会影响到能耗。为了减少这种影响，通常的做法是尽可能的减少DOM操作。而使用文档碎片就是一种有效的优化手段。</p>\n<ol start=\"3\">\n<li>vue 数组如何实现双向绑定</li>\n</ol>\n<p>重写数组方法</p>\n<ol start=\"4\">\n<li><h1 id=\"vue组件传值有哪些方式\"><a href=\"#vue组件传值有哪些方式\" class=\"headerlink\" title=\"vue组件传值有哪些方式\"></a>vue组件传值有哪些方式</h1></li>\n</ol>\n<ul>\n<li><strong>父子通信：<br>父向子传递数据是通过 <code>props</code>，子向父是通过 <code>events（$emit）</code>；通过父链 &#x2F; 子链也可以通信（<code>$parent/$children）</code>；<code>ref</code> 也可以访问组件实例；<code>provide</code>&#x2F;<code>inject</code> API；<code>$attrs/$listeners</code></strong></li>\n<li><strong>兄弟通信：<br>Bus；Vuex</strong></li>\n<li><strong>跨级通信：<br>Bus；Vuex；<code>provide</code>&#x2F;<code>inject</code> API、<code>$attrs</code>&#x2F;<code>$listeners</code></strong></li>\n</ul>\n<ol start=\"5\">\n<li>vuex的工作流程</li>\n</ol>\n<p><a href=\"https://blog.csdn.net/m0_74331160/article/details/128806413\">https://blog.csdn.net/m0_74331160/article/details/128806413</a></p>\n<p><a href=\"https://blog.csdn.net/shanglin1122/article/details/131812888\">https://blog.csdn.net/shanglin1122/article/details/131812888</a></p>\n<ol start=\"6\">\n<li><p>vuex的模块化开发</p>\n</li>\n<li><p>vuex的辅助函数</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">介绍：通过辅助函数mapGetters、mapState、mapActions、mapMutations，把vuex.store中的属性映射到vue实例身上，这样在vue实例中就能访问vuex.store中的属性了，对于操作vuex.store就变得非常方便。</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li><p>$nextTick原理</p>\n</li>\n<li><p>vue2和vu e3的生命周期函数</p>\n</li>\n<li><p>vue2的watch和vue3的有什么不同</p>\n</li>\n</ol>\n<p>写法不同，vue3可以进行组合监听，vue3默认开深度监听</p>\n<p>11.ref和reactive的区别</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">理解：</span><br><span class=\"line\">1.ref是定义简单类型 和单一的对象</span><br><span class=\"line\">2.reactive 定义复杂的类型</span><br><span class=\"line\"></span><br><span class=\"line\">梳理文档：</span><br><span class=\"line\">ref和reactive都是Vue.js 3.x版本中新增的响应式API，用于实现组件的数据响应式更新。它们的主要区别如下：</span><br><span class=\"line\"></span><br><span class=\"line\">1. 数据类型不同：ref用于包装JavaScript基本类型的数据（如字符串、数字、布尔值等），而reactive可以用于包装JavaScript对象和数组等复杂类型的数据。</span><br><span class=\"line\">2. 使用方式不同：ref需要通过在模板中使用ref指令以及在JavaScript代码中使用ref函数进行创建和使用，而reactive则需要通过调用Vue.js提供的reactive函数进行包装和创建。</span><br><span class=\"line\">3. 访问方式不同：对于通过ref函数创建的响应式数据，我们可以通过.value属性来访问其实际值；而对于通过reactive函数创建的响应式对象，我们可以直接访问其属性或调用其方法。</span><br><span class=\"line\">4. 设计理念不同：ref主要是为了解决单一元素/数据的响应式问题，而reactive则是为了解决JavaScript对象和数组等复杂数据结构的响应式问题。</span><br><span class=\"line\"></span><br><span class=\"line\">总的来说，ref和reactive都是用于实现Vue.js组件的数据响应式更新，但是它们的使用方法、适用范围和设计理念等方面略有不同，需要根据具体的应用场景选择合适的API进行使用。</span><br><span class=\"line\">————————————————</span><br><span class=\"line\">版权声明：本文为CSDN博主「Xxf909011」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</span><br><span class=\"line\">原文链接：https://blog.csdn.net/Xxf909011/article/details/130635325</span><br></pre></td></tr></table></figure>\n\n<ol start=\"12\">\n<li><p>Vue3 ref的原理</p>\n</li>\n<li><p>有哪些hook</p>\n<p>useState、useEffect、useContext、useMemo、useCallback。useState</p>\n</li>\n<li><p>受控组件和非受控组件</p>\n</li>\n</ol>\n<p>react受控组件和不受控组件的区别：1、受控组件依赖于状态，而非受控组件不受状态的控制；2、受控组件只有继承“React.Component”才会有状态，而非受控组件则不是只有继承才有状态；3、受控组件一般适用于需要动态设置初始值时，非受控组件一般用于无任何动态初始值信息时。</p>\n<ol start=\"15\">\n<li>redux中间件</li>\n</ol>\n<p>Redux 中间件是一种用于扩展 Redux 功能的插件系统。通过使用中间件，你可以在 Redux 的 action 被分发到 reducer 之前或之后执行自定义的逻辑。以下是一些常用的 Redux 中间件：</p>\n<ol>\n<li>redux-thunk：这是一个用于处理异步操作的中间件。它允许你分发一个函数作为 action，该函数接收 dispatch 和 getState 作为参数，并可以执行异步操作，如 API 调用。一旦异步操作完成，你可以使用 dispatch 分发一个新的 action。</li>\n<li>redux-saga：这是另一个用于处理异步操作的中间件，采用更严格的方式管理副作用。它使用 Generator 函数和 yield 表达式来处理异步操作，提供更细粒度的控制。与 redux-thunk 相比，redux-saga 更适合于复杂的异步流和副作用管理。</li>\n<li>redux-promise：这个中间件允许你分发一个 Promise 对象作为 action。当 Promise 解析时，中间件会自动分发一个新的 action，将 Promise 的结果作为 payload。这对于处理异步操作（如 API 调用）非常有用，尤其是当使用 fetch 或其他返回 Promise 的函数时。</li>\n<li>redux-observable：这个中间件使用 RxJS（Reactive Extensions for JavaScript）来处理异步操作和副作用。它允许你使用 Observable 流来处理 action，并提供更强大的操作符来处理复杂的异步逻辑。</li>\n<li>redux-logger：这是一个简单的中间件，用于在控制台中记录 Redux store 的状态变化和 action 分发。它可以帮助你在开发过程中调试和跟踪应用程序的状态变化。</li>\n<li>redux-devtools-extension：这是一个浏览器扩展程序，用于在开发过程中实时跟踪和调试 Redux store 的状态变化。它可以显示 action 历史记录、状态快照和时间旅行的功能，帮助你更好地理解和调试应用程序的状态管理。</li>\n</ol>\n<p>这些中间件只是 Redux 社区中的一部分，还有很多其他中间件可以用于扩展 Redux 的功能，以满足各种应用程序的需求。</p>\n","text":" vue模版编译原理 https://zhuanlan.zhihu.com/p/621318626 js文档碎片 Vue文档碎片是一个容器，用于暂时存放创建的D...","permalink":"/post/面试题/4.八月瓜一面","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"面试题","slug":"面试题","count":16,"path":"api/tags/面试题.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vue%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">vue组件传值有哪些方式</span></a></li></ol>","author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"2.交易所一面","uid":"a27f8cb4a0e9f55c9e8d2da96f3e5630","slug":"面试题/2.交易所一面","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.993Z","comments":true,"path":"api/articles/面试题/2.交易所一面.json","keywords":null,"cover":null,"text":" Vue3和vue2有啥区别 12345678910111213141516171819202122232425262728293031323334353637...","permalink":"/post/面试题/2.交易所一面","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"面试题","slug":"面试题","count":16,"path":"api/tags/面试题.json"}],"author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"3.交研智慧一面","uid":"edc763cbfc515ed7263e9656729e3c28","slug":"面试题/3.交研智慧一面","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.993Z","comments":true,"path":"api/articles/面试题/3.交研智慧一面.json","keywords":null,"cover":[],"text":" 详细介绍一个项目 seviceWorker和普通缓存有啥区别 1234567891011121314151617181920Service Worker 和普...","permalink":"/post/面试题/3.交研智慧一面","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"面试题","slug":"面试题","count":16,"path":"api/tags/面试题.json"}],"author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}