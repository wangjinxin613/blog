{"title":"5.小红书一面","uid":"72491d8a53840bf6b32cd4a867f37441","slug":"面试题/5.小红书一面","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.993Z","comments":true,"path":"api/articles/面试题/5.小红书一面.json","keywords":null,"cover":null,"content":"<ol>\n<li>浏览器的事件循环机制和node的事件循环机制有什么不同</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 执行环境：浏览器的Event Loop运行在浏览器环境中，而Node.js的Event Loop运行在Node.js环境中。浏览器的Event Loop负责处理浏览器事件、用户交互和渲染等，而Node.js的Event Loop主要处理I/O操作和网络请求等。</span><br><span class=\"line\"></span><br><span class=\"line\">　　2. 宏任务和微任务：浏览器和Node.js都将任务分为宏任务(Macro Task)和微任务(Micro Task)，但它们在微任务的处理上有所不同。在浏览器中，微任务包括Promise、MutationObserver和queueMicrotask等，而在Node.js中，微任务包括Promise和process.nextTick等。</span><br><span class=\"line\"></span><br><span class=\"line\">　　3. 触发时机：浏览器的Event Loop通常在每次完成宏任务后执行微任务队列，然后执行浏览器渲染，从而实现动画效果。而Node.js的Event Loop在每次完成一个宏任务后，会先执行微任务队列，然后继续执行下一个宏任务。</span><br><span class=\"line\"></span><br><span class=\"line\">　　4. Event Loop的运行机制：浏览器的Event Loop通常是单线程的，通过异步回调函数和事件触发来实现非阻塞的异步操作。而Node.js的Event Loop是基于Libuv库实现的，它利用了底层操作系统提供的多线程特性，使得Node.js能够处理更高的并发请求。</span><br><span class=\"line\"></span><br><span class=\"line\">　　总体而言，浏览器和Node.js的事件循环在目标、实现和行为上存在一些差异。了解这些区别有助于开发者更好地理解和处理异步操作，并根据具体场景做出适当的调整。</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>script标签中 defer和async分别是什么</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defer 和 async属性都是去异步加载外部的JS脚本文件，它们都不会阻塞页面的解析，其区别如下：</span><br><span class=\"line\"></span><br><span class=\"line\">执行顺序：多个带async属性的标签，不能保证加载的顺序；多个带defer属性的标签，按照加载顺序执行；</span><br><span class=\"line\">脚本是否并行执行：</span><br><span class=\"line\">async属性，表示后续文档的加载和执行与js脚本的加载和执行是并行进行的，即异步执行；</span><br><span class=\"line\">defer属性，加载后续文档的过程和js脚本的加载(此时仅加载不执行)是并行进行的(异步)，js脚本需要等到文档所有元素解析完成之后才执行，DOMContentLoaded事件触发执行之前。</span><br><span class=\"line\">async比较适合第三方的脚本，defer适合与dom有关联的脚本，双方都只适于外部脚本。 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>如何计算首屏时间</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 确保页面已完全加载  </span><br><span class=\"line\">window.onload = function() &#123;  </span><br><span class=\"line\">  // 获取性能数据  </span><br><span class=\"line\">  var performanceData = window.performance.timing;  </span><br><span class=\"line\">    </span><br><span class=\"line\">  // 计算TTFB  </span><br><span class=\"line\">  var ttfb = performanceData.responseStart - performanceData.navigationStart;  </span><br><span class=\"line\">    </span><br><span class=\"line\">  // 输出TTFB  </span><br><span class=\"line\">  console.log(&#x27;TTFB: &#x27; + ttfb + &#x27;ms&#x27;);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>requestAnimationFrame是什么</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requestAnimationFrame是浏览器提供的一个用于优化动画和渲染的API。它基于浏览器的刷新率，调度回调函数的执行，以确保动画和渲染的流畅性和高性能。使用requestAnimationFrame，开发者可以在每个浏览器刷新帧之前请求执行一个函数。浏览器会在适当的时机调用这个函数，以保证动画和渲染的协调性。</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>servicesWorker在什么时候更新</li>\n<li>h t t p2.0更新了什么</li>\n</ol>\n<p>HTTP2.0主要更新了以下内容：</p>\n<ol>\n<li><p>HTTP&#x2F;2是超文本传输协议（HTTP）的第二个主要版本，相较于之前的HTTP&#x2F;1.1，它带来了多项重要的改进和优化，主要包括：</p>\n<ol>\n<li><strong>二进制协议</strong>：HTTP&#x2F;2使用二进制格式而不是HTTP&#x2F;1.x的文本格式。二进制协议解析起来更高效，更少出错。</li>\n<li><strong>多路复用</strong>：在同一个连接上同时发送多个请求-响应消息，而不需要等待一个交换完成后再开始下一个。这减少了页面加载时间和服务器压力。</li>\n<li><strong>头部压缩</strong>：HTTP&#x2F;2使用HPACK（头部压缩算法）减少了头部大小，减轻了带宽压力。</li>\n<li><strong>服务器推送</strong>：服务器可以对一个客户端请求发送多个响应。服务器可以主动推送资源给客户端，而不必等待客户端对这些资源的请求。</li>\n<li><strong>流控制</strong>：HTTP&#x2F;2为每个流提供了流控制，从而优化了数据传输过程，提高了性能。</li>\n<li><strong>优先级和依赖性</strong>：客户端可以指定请求的优先级，允许更重要的资源更快地传输。</li>\n</ol>\n</li>\n<li><p>BFC是啥</p>\n</li>\n</ol>\n<p>BFC即<strong>Block Formatting Contexts（块级格式化上下文）</strong>，是W3C CSS2.1规范中的一个概念。</p>\n<p>BFC是指浏览器中创建了一个独立的渲染区域，并且拥有一套渲染规则，它决定了其子元素如何定位，以及与其他元素的相互关系和作用。简单来说就是，BFC是一个完全独立的空间（布局环境），让空间里的子元素不会影响到外面的布局。</p>\n","text":" 浏览器的事件循环机制和node的事件循环机制有什么不同 1234567891. 执行环境：浏览器的Event Loop运行在浏览器环境中，而Node.js的E...","permalink":"/post/面试题/5.小红书一面","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"面试题","slug":"面试题","count":14,"path":"api/tags/面试题.json"}],"toc":"","author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"2.交易所一面","uid":"a27f8cb4a0e9f55c9e8d2da96f3e5630","slug":"面试题/2.交易所一面","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.993Z","comments":true,"path":"api/articles/面试题/2.交易所一面.json","keywords":null,"cover":null,"text":" Vue3和vue2有啥区别 12345678910111213141516171819202122232425262728293031323334353637...","permalink":"/post/面试题/2.交易所一面","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"面试题","slug":"面试题","count":14,"path":"api/tags/面试题.json"}],"author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"6.智联招聘一面和二面","uid":"ff00ce35a2f14eec99334118a6d1eec3","slug":"面试题/6.智联招聘一面和二面","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.993Z","comments":true,"path":"api/articles/面试题/6.智联招聘一面和二面.json","keywords":null,"cover":null,"text":" css水平居中，垂直居中的几种实现方式 Position定位都有哪些 数组有哪些属性或方法 123456789101112131415161718192021...","permalink":"/post/面试题/6.智联招聘一面和二面","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"面试题","slug":"面试题","count":14,"path":"api/tags/面试题.json"}],"author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}