{"title":"8.途家一面","uid":"df6f60ca2a548c4bb3e07a9eadb3264a","slug":"面试题/8.途家一面","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.993Z","comments":true,"path":"api/articles/面试题/8.途家一面.json","keywords":null,"cover":null,"content":"<ol>\n<li><p>js的数据类型</p>\n</li>\n<li><p>js怎么理解闭包，有哪些应用场景</p>\n</li>\n<li><p>事件循环机制</p>\n</li>\n<li><p>对原型和原型链怎么理解</p>\n</li>\n<li><p>j s深拷贝</p>\n</li>\n<li><p>变量声明提升</p>\n</li>\n<li><p>js异步的理解</p>\n</li>\n<li><p>js的垃圾回收机制</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">二、垃圾回收策略</span><br><span class=\"line\">在 JavaScript 内存管理中有一个概念叫做 可达性 ，就是那些以某种方式可访问或者说可用的值，它们被保证存储在内存中，反之不可访问则需回收。至于如何回收，其实就是怎样发现这些不可达的对象（垃圾）它并给予清理的问题， JavaScript 垃圾回收机制的原理就是定期找出那些不再用到的内存（变量），然后释放其内存。（不是实时的找出无用内存并释放的原因：实时开销太大了）。</span><br><span class=\"line\"></span><br><span class=\"line\">1、标记清除法</span><br><span class=\"line\">1.1 策略</span><br><span class=\"line\"></span><br><span class=\"line\">标记清除（ Mark-Sweep ），目前在 JavaScript引擎 里这种算法是最常用的，到目前为止的大多数浏览器的 JavaScript引擎 都在采用标记清除算法，只是各大浏览器厂商还对此算法进行了优化加工，且不同浏览器的 JavaScript引擎 在运行垃圾回收的频率上有所差异。 此算法分为 标记 和 清除 两个阶段，标记阶段即为所有活动对象做上标记，清除阶段则把没有标记（也就是非活动对象）销毁。</span><br><span class=\"line\"></span><br><span class=\"line\">你可能会疑惑怎么给变量加标记？</span><br><span class=\"line\"></span><br><span class=\"line\">当变量进入执行环境时，反转某一位（通过一个二进制字符来表示标记）；</span><br><span class=\"line\">维护进入环境变量和离开环境变量这样两个列表，可以自由的把变量从一个列表转移到另一个列表；</span><br><span class=\"line\">引擎在执行 GC（使用标记清除算法）时，需要从出发点去遍历内存中所有的对象去打标记，而这个出发点有很多，我们称之为一组根对象，而所谓的根对象，其实在浏览器环境中包括又不止于 全局Window对象、文档DOM树等。</span><br><span class=\"line\"></span><br><span class=\"line\">整个标记清除算法大致过程就像下面这样：</span><br><span class=\"line\"></span><br><span class=\"line\">垃圾收集器在运行时会给内存中的所有变量都加上一个标记，假设内存中所有对象都是垃圾，全标记为0；</span><br><span class=\"line\">然后从各个根对象开始遍历，把不是垃圾的节点改成1；</span><br><span class=\"line\">清理所有标记为0的垃圾，销毁并回收它们所占用的内存空间；</span><br><span class=\"line\">最后，把所有内存中对象标记修改为0，等待下一轮垃圾回收；</span><br><span class=\"line\">1.2 优点</span><br><span class=\"line\"></span><br><span class=\"line\">实现比较简单，打标记也无非打与不打两种情况，这使得一位二进制位（0和1）就可以为其标记，非常简单</span><br><span class=\"line\"></span><br><span class=\"line\">1.3 缺点</span><br><span class=\"line\"></span><br><span class=\"line\">在清除之后，剩余的对象内存位置是不变的，也会导致空闲内存空间是不连续的，出现了 内存碎片，并且由于剩余空闲内存不是一整块，它是由不同大小内存组成的内存列表，这就牵扯出了内存分配的问题：</span><br><span class=\"line\">2、引用计数算法</span><br><span class=\"line\">1.策略</span><br><span class=\"line\"></span><br><span class=\"line\">引用计数（ Reference Counting ），这其实是早先的一种垃圾回收算法，它把对象是否不再需要简化定义为对象有没有其他对象引用到它，如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收，但因为它的问题很多，目前很少使用这种算法了。</span><br><span class=\"line\"></span><br><span class=\"line\">它的策略是跟踪记录每个变量值被使用的次数</span><br><span class=\"line\"></span><br><span class=\"line\">当声明了一个变量并且将一个引用类型赋值给该变量的时候这个值的引用次数就为 1；</span><br><span class=\"line\">如果同一个值又被赋给另一个变量，那么引用数加 1；</span><br><span class=\"line\">如果该变量的值被其他的值覆盖了，则引用次数减 1；</span><br><span class=\"line\">当这个值的引用次数变为 0 的时候，说明没有变量在使用，这个值没法被访问了，回收空间，垃圾回收器会在运行的时候清理掉引用次数为 0 的值占用的内存；</span><br><span class=\"line\">let a = new Object() // 1a</span><br><span class=\"line\">let b = a // 2a,b</span><br><span class=\"line\">a = null // 1b</span><br><span class=\"line\">b = null // 0</span><br><span class=\"line\">... // GC</span><br><span class=\"line\"></span><br><span class=\"line\">循环引用，即对象 A 有一个指针指向对象 B，而对象 B 也引用了对象 A：</span><br><span class=\"line\">function test()&#123;</span><br><span class=\"line\"> let A = new Object()</span><br><span class=\"line\"> let B = new Object()</span><br><span class=\"line\"> A.b = B</span><br><span class=\"line\"> B.a = A</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">2.优点</span><br><span class=\"line\"></span><br><span class=\"line\">引用计数在引用值为 0 时，也就是在变成垃圾的那一刻就会被回收，所以它可以立即回收垃圾；</span><br><span class=\"line\">标记清除算法需要每隔一段时间进行一次，那在应用程序（JS脚本）运行过程中线程就必须要暂停去执行一段时间的 GC，另外，标记清除算法需要遍历堆里的活动以及非活动对象来清除，而引用计数则只需要在引用时计数就可以了；</span><br><span class=\"line\">3.缺点</span><br><span class=\"line\"></span><br><span class=\"line\">需要一个计数器，而此计数器需要占很大的位置，因为我们也不知道被引用数量的上限；</span><br><span class=\"line\">无法解决循环引用无法回收的问题；</span><br><span class=\"line\">3、V8对GC的优化</span><br><span class=\"line\">1.分代式垃圾回收</span><br><span class=\"line\"></span><br><span class=\"line\">上文所说的垃圾回收策略在每次垃圾回收时都要检查内存中所有的对象，这样的话对于一些大、老、存活时间长的对象来说，同新、小、存活时间短的对象一个频率的检查很不好，因为前者需要时间长并且不需要频繁进行清理，后者恰好相反，这也是分代式的原则。</span><br><span class=\"line\"></span><br><span class=\"line\">1.1 新老生代</span><br><span class=\"line\"></span><br><span class=\"line\">V8 的垃圾回收策略主要基于分代式垃圾回收机制，V8 中将堆内存分为新生代和老生代两区域，采用不同的垃圾回收器也就是不同的策略管理垃圾回收。</span><br><span class=\"line\"></span><br><span class=\"line\">新生代的对象为存活时间较短的对象，简单来说就是新产生的对象，通常只支持 1～8M 的容量，而老生代的对象为存活事件较长或常驻内存的对象，简单来说就是经历过新生代垃圾回收后还存活下来的对象，容量通常比较大 V8 整个堆内存的大小就等于新生代加上老生代的内存：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1.2 新生代垃圾回收</span><br><span class=\"line\"></span><br><span class=\"line\">新生代对象是通过一个名为 Scavenge 的算法进行垃圾回收，在 Scavenge 算法的具体实现中，主要采用了一种复制 式的方法即 Cheney 算法： Cheney 算法 中将堆内存一分为二，一个是处于使用状态的空间我们暂且称之为使用区，一个是处于闲置状态的空间我们称之为空闲区：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">新加入的对象都会存放到使用区，当使用区快被写满时，就需要执行一次垃圾清理操作。</span><br><span class=\"line\"></span><br><span class=\"line\">当开始进行垃圾回收时，新生代垃圾回收器会对使用区中的活动对象做标记，标记完成之后将使用区的活动对象复制进空闲区并进行排序，随后进入垃圾清理阶段，即将非活动对象占用的空间清理掉。最后进行角色互换，把原来的使用区变成空闲区，把原来的空闲区变成使用区。</span><br><span class=\"line\"></span><br><span class=\"line\">当一个对象经过多次复制后依然存活，它将会被认为是生命周期较长的对象，随后会被移动到老生代中，采用老生代的垃圾回收策略进行管理。</span><br><span class=\"line\"></span><br><span class=\"line\">另外还有一种情况，如果复制一个对象到空闲区时，空闲区空间占用超过了 25%，那么这个对象会被直接晋升到老生代空间中，设置为 25% 的比例的原因是，当完成 Scavenge 回收后，空闲区将翻转成使用区，继续进行对象内存的分配，若占比过大，将会影响后续内存分配。</span><br><span class=\"line\"></span><br><span class=\"line\">1.3 老生代垃圾回收</span><br><span class=\"line\"></span><br><span class=\"line\">相比于新生代，老生代的垃圾回收就比较容易理解了，上面我们说过，对于大多数占用空间大、存活时间长的对象会被分配到老生代里，因为老生代中的对象通常比较大，如果再如新生代一般分区然后复制来复制去就会非常耗时，从而导致回收执行效率不高，所以老生代垃圾回收器来管理其垃圾回收执行，它的整个流程就采用的就是标记清除了。</span><br><span class=\"line\"></span><br><span class=\"line\">首先是标记阶段，从一组根元素开始，递归遍历这组根元素，遍历过程中能到达的元素称为活动对象，没有到达的元素就可以判断为非活动对象。 清除阶段老生代垃圾回收器会直接将非活动对象，也就是数据清理掉。</span><br><span class=\"line\"></span><br><span class=\"line\">前面我们也提过，标记清除算法在清除后会产生大量不连续的内存碎片，过多的碎片会导致大对象无法分配到足够的连续内存，而 V8 中就采用了上文中说的标记整理算法来解决这一问题来优化空间。</span><br><span class=\"line\"></span><br><span class=\"line\">1.4总结</span><br><span class=\"line\"></span><br><span class=\"line\">分代式机制把一些新、小、存活时间短的对象作为新生代，采用一小块内存频率较高的快速清理，而一些大、老、存活时间长的对象作为老生代，使其很少接受检查，新老生代的回收机制及频率是不同的，可以说此机制的出现很大程度提高了垃圾回收机制的效率。</span><br><span class=\"line\"></span><br><span class=\"line\">2.并行回收(Parallel)</span><br><span class=\"line\"></span><br><span class=\"line\">先了解一个概念：全停顿（ Stop-The-World ），我们都知道 JavaScript 是一门单线程的语言，它是运行在主线程上的，那在进行垃圾回收时就会阻塞 JavaScript 脚本的执行，需等待垃圾回收完毕后再恢复脚本执行，我们把这种行为叫做 全停顿。</span><br><span class=\"line\"></span><br><span class=\"line\">所谓并行，也就是同时的意思，它指的是垃圾回收器在主线程上执行的过程中，开启多个辅助线程，同时执行同样的回收工作。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">新生代对象空间就采用并行策略，在执行垃圾回收的过程中，会启动了多个线程来负责新生代中的垃圾清理操作，这些线程同时将对象空间中的数据移动到空闲区域，这个过程中由于数据地址会发生改变，所以还需要同步更新引用这些对象的指针，这就是并行回收。</span><br><span class=\"line\"></span><br><span class=\"line\">3.增量标记与懒性清理</span><br><span class=\"line\"></span><br><span class=\"line\">并行策略虽然可以增加垃圾回收的效率，对于新生代垃圾回收器能够有很好的优化，但是它还是一种全停顿式的垃圾回收方式，对于老生代来说，它的内部存放的都是一些比较大的对象，对于这些大的对象 GC 时哪怕我们使用并行策略依然可能会消耗大量时间。所以为了减少全停顿的时间，在 2011 年，V8 对老生代的标记进行了优化，从全停顿标记切换到增量标记。</span><br><span class=\"line\"></span><br><span class=\"line\">3.1 什么是增量</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">3.2 三色标记法(暂停与恢复)</span><br><span class=\"line\"></span><br><span class=\"line\">三色标记法即使用每个对象的两个标记位和一个标记工作表来实现标记，两个标记位编码三种颜色：白、灰、黑</span><br><span class=\"line\"></span><br><span class=\"line\">白色指的是未被标记的对象；</span><br><span class=\"line\">灰色指自身被标记，成员变量（该对象的引用对象）未被标记；</span><br><span class=\"line\">黑色指自身和成员变量皆被标记；</span><br><span class=\"line\"></span><br><span class=\"line\">我们用最简单的表达方式来解释这一过程，最初所有的对象都是白色，意味着回收器没有标记它们，从一组根对象开始，先将这组根对象标记为灰色并推入到标记工作表中，当回收器从标记工作表中弹出对象并访问它的引用对象 时，将其自身由灰色转变成黑色，并将自身的下一个引用对象转为灰色；就这样一直往下走，直到没有可标记灰色的对象时，也就是无可达（无引用）的对象了，那么剩下的所有白色对象都是无法到达的，即等待回收（如上图中的 C、E 将要等待回收）。</span><br><span class=\"line\"></span><br><span class=\"line\">采用三色标记法后我们在恢复执行时就好办多了，可以直接通过当前内存中有没有灰色节点来判断整个标记是否完成，如没有灰色节点，直接进入清理阶段，如还有灰色标记，恢复时直接从灰色的节点开始继续执行就可以。</span><br><span class=\"line\"></span><br><span class=\"line\">三色标记法的 mark 操作可以渐进执行的而不需每次都扫描整个内存空间，可以很好的配合增量回收进行暂停恢复的一些操作，从而减少 全停顿 的时间。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">4. 总结</span><br><span class=\"line\"></span><br><span class=\"line\">V8 的垃圾回收策略主要基于分代式垃圾回收机制，这我们说过，关于新生代垃圾回收器，我们说使用并行回收可以很好的增加垃圾回收的效率，上述的这三种方式各有优缺点，所以在老生代垃圾回收器中这几种策略都是融合使用的：</span><br><span class=\"line\"></span><br><span class=\"line\">老生代主要使用并发标记，主线程在开始执行 JavaScript 时，辅助线程也同时执行标记操作（标记操作全都由辅助线程完成）；</span><br><span class=\"line\">标记完成之后，再执行并行清理操作（主线程在执行清理操作时，多个辅助线程也同时执行清理操作）；</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"9\">\n<li>跨域</li>\n<li>vue data为啥必需是函数</li>\n<li>computed和watch有什么不同</li>\n<li>vue怎么实现响应式数据</li>\n<li>mvvm的理解</li>\n<li>虚拟dom的作用</li>\n<li>Keep-aliVE的用处和原理</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在 Vue 的世界里，keep-alive 就像是一种魔法保险箱，它能够保护和缓存你的组件，让它们即使在被切换或隐藏时，仍然保留它们的状态、避免重新渲染。让我们一探究竟，看看这个神奇的 keep-alive 是怎么工作的！</span><br><span class=\"line\">6.2 keep-alive 的工作原理</span><br><span class=\"line\">6.2.1 缓存机制</span><br><span class=\"line\">当组件第一次渲染时，keep-alive 会将其存储在内部缓存中。</span><br><span class=\"line\">当组件再次需要渲染时，keep-alive 会从缓存中取出组件实例，而不是重新创建。</span><br><span class=\"line\">6.2.2 生命周期影响</span><br><span class=\"line\">当组件被 keep-alive 包裹时，它不会经历常规的销毁和重建过程。</span><br><span class=\"line\">keep-alive 会触发特定的生命周期钩子，如 activated 和 deactivated。</span><br><span class=\"line\">6.3 使用场景</span><br><span class=\"line\">6.3.1 多标签页</span><br><span class=\"line\">在构建类似多标页的界面时，keep-alive 可以保持每个标签页状态，用户切换标签时不会失去之前的状态。</span><br><span class=\"line\">6.3.2 性能优化</span><br><span class=\"line\">在移动端应用或性能敏感的应用中，keep-alive 可以减少组件渲染的性能开销。</span><br></pre></td></tr></table></figure>\n\n<ol start=\"16\">\n<li>nextTick的作用和原理</li>\n<li>ssr</li>\n<li></li>\n</ol>\n","text":" js的数据类型 js怎么理解闭包，有哪些应用场景 事件循环机制 对原型和原型链怎么理解 j s深拷贝 变量声明提升 js异步的理解 js的垃圾回收机制 123...","permalink":"/post/面试题/8.途家一面","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"面试题","slug":"面试题","count":16,"path":"api/tags/面试题.json"}],"toc":"","author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"4.八月瓜一面","uid":"b4ebdb6509523e7ae3421c10b60ef62f","slug":"面试题/4.八月瓜一面","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.993Z","comments":true,"path":"api/articles/面试题/4.八月瓜一面.json","keywords":null,"cover":null,"text":" vue模版编译原理 https://zhuanlan.zhihu.com/p/621318626 js文档碎片 Vue文档碎片是一个容器，用于暂时存放创建的D...","permalink":"/post/面试题/4.八月瓜一面","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"面试题","slug":"面试题","count":16,"path":"api/tags/面试题.json"}],"author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"6.智联招聘一面和二面","uid":"ff00ce35a2f14eec99334118a6d1eec3","slug":"面试题/6.智联招聘一面和二面","date":"2024-05-05T06:52:32.000Z","updated":"2024-05-05T06:52:33.993Z","comments":true,"path":"api/articles/面试题/6.智联招聘一面和二面.json","keywords":null,"cover":null,"text":" css水平居中，垂直居中的几种实现方式 Position定位都有哪些 数组有哪些属性或方法 123456789101112131415161718192021...","permalink":"/post/面试题/6.智联招聘一面和二面","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"面试题","slug":"面试题","count":16,"path":"api/tags/面试题.json"}],"author":{"name":"MessageWall","slug":"blog-author","avatar":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2F0bcda423-149d-411d-a505-d29abc1ab6de%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1717404600&t=829a21da2f1f1a8181b572805d48b476","link":"/","description":"欢迎来到小王的博客～ <br/> 博客不定时更新，欢迎收藏","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}